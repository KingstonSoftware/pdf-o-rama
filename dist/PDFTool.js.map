{"version":3,"sources":["../src/PDFTool.js"],"names":["toText","item","getType","hummus","ePDFObjectLiteralString","toPDFLiteralString","ePDFObjectHexString","toPDFHexString","value","PDFTool","autobind","constructor","toolName","log","container","fs","concat","options","pdfFiles","length","outputFile","pdfFile","existsSync","Error","pdfWriter","createWriter","appendPDFPagesFromPDF","end","parsePageTree","context","dict","dictType","queryObject","kids","toJSArray","forEach","kid","pdfReader","parseNewObject","getObjectID","annots","annot","annotDict","subType","hasName","exists","hasKids","fields","push","name","page","nextPageNum","rect","map","n","dataFile","createReader","catalogDict","queryDictionaryObject","getTrailer","pagesDict","fieldData","numPages","stripAcroFormAndAnnotations","copyFile","buf","readFile","md5","buffer","writeFile","JSON5","stringify","undefined","startModifiedDictionaryExcluding","originalDict","excludedKeys","originalDictJS","toJSObject","newDict","objectsContext","startDictionary","Object","getOwnPropertyNames","element","includes","writeKey","copyingContext","copyDirectObjectAsIs","strip","createPDFCopyingContext","getPagesCount","i","parsePage","pageMediaBox","getMediaBox","newPage","createPage","mergePDFPageToPage","writePage","fill","data","parse","encoding","e","message","createWriterToModify","modifiedFilePath","getModifiedFileParser","font","fontDims","fontFile","getFontForFile","calculateTextDimensions","toPDFDictionary","warning","pageModifier","PDFPageModifier","pageContext","startContext","getContext","filter","f","field","x","y","w","h","rise","halfH","type","q","rg","re","Q","BT","g","Tm","Tf","Tj","ET","pngFileName","tmp","tmpName","postfix","QRCode","toFile","endContext","imageXObject","createFormXObjectFromPNG","cm","doXObject","unlinkSync","G","checkboxBorders","J","S","dx","dy","m","l","Math","PI","gsID","createOpacityExtGState","formXObject","createFormXObject","gsName","getResourcesDictionary","addExtGStateMapping","getContentContext","gs","B","height","endFormXObject","cos","sin","opacity","getObjectsContext","id","startNewIndirectObject","writeNameValue","writeNumber","endLine","endDictionary","watermark","watermarkFile","getPDFPageInfo","pageNum","mediaBox","watermarkInfo","formIDs","createFormXObjectsFromPDF","ePDFPageBoxMediaBox","startPageContentContext","addFormXObjectMapping","run","argv","string","boolean","alias","o","d","c","args","debug","command","_","toLowerCase","shift","version","info","fullVersion","help","error"],"mappings":"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","sourcesContent":["import parseArgs from \"minimist\"\nimport { fullVersion } from \"./version\"\nimport fs from \"fs-extra\"\nimport tmp from \"tmp-promise\"\nimport hummus from \"hummus\"\nimport JSON5 from \"json5\"\nimport QRCode from \"qrcode\"\nimport md5 from \"md5\"\nimport autobind from \"autobind-decorator\"\nimport assert from \"assert\"\n\nfunction toText(item) {\n  if (item.getType() === hummus.ePDFObjectLiteralString) {\n    return item.toPDFLiteralString().toText()\n  } else if (item.getType() === hummus.ePDFObjectHexString) {\n    return item.toPDFHexString().toText()\n  } else {\n    return item.value\n  }\n}\n\n@autobind\nexport class PDFTool {\n  constructor(toolName, log, container) {\n    container = container || {}\n\n    this.toolName = toolName\n    this.log = log\n    this.hummus = container.hummus || hummus\n    this.fs = container.fs || fs\n  }\n\n  async concat(options) {\n    assert(\n      options.pdfFiles.length >= 2,\n      \"Must specify at least two PDF files to concatenate\"\n    )\n    assert(options.outputFile, \"No output file specified\")\n\n    for (let pdfFile of options.pdfFiles) {\n      if (!this.fs.existsSync(pdfFile)) {\n        throw new Error(`File '${pdfFile}' does not exist`)\n      }\n    }\n\n    const pdfWriter = this.hummus.createWriter(options.outputFile)\n\n    for (let pdfFile of options.pdfFiles) {\n      pdfWriter.appendPDFPagesFromPDF(pdfFile)\n    }\n\n    pdfWriter.end()\n  }\n\n  parsePageTree(context, dict) {\n    const dictType = dict.queryObject(\"Type\").value\n\n    if (dictType === \"Pages\") {\n      // Parse the kids of this tree\n      const kids = dict.queryObject(\"Kids\").toJSArray()\n\n      kids.forEach((kid) => {\n        this.parsePageTree(\n          context,\n          this.pdfReader.parseNewObject(kid.getObjectID())\n        )\n      })\n    } else if (dictType === \"Page\") {\n      // Parse any field annotations on the page\n      let annots = dict.queryObject(\"Annots\")\n\n      if (annots) {\n        annots = annots.toJSArray()\n\n        annots.forEach((annot) => {\n          let annotDict = null\n\n          if (annot.getType() === 9) {\n            annotDict = this.pdfReader.parseNewObject(annot.getObjectID())\n          } else {\n            annotDict = annot\n          }\n\n          const subType = annotDict.queryObject(\"Subtype\").value\n          const hasName = annotDict.exists(\"T\")\n          const hasKids = annotDict.exists(\"Kids\")\n\n          if (subType === \"Widget\" && !hasKids && hasName) {\n            context.fields.push({\n              name: annotDict.queryObject(\"T\"),\n              page: context.nextPageNum,\n              rect: annotDict\n                .queryObject(\"Rect\")\n                .toJSArray()\n                .map((n) => n.value),\n            })\n          }\n        })\n\n        context.nextPageNum += 1\n      }\n    }\n  }\n\n  async fields(options) {\n    assert(\n      options.pdfFile,\n      \"Must specify a PDF from which to extract information\"\n    )\n    assert(\n      this.fs.existsSync(options.pdfFile),\n      `File '${options.pdfFile}' does not exist`\n    )\n    assert(options.dataFile, `No output data file specified`)\n\n    this.pdfReader = this.hummus.createReader(options.pdfFile)\n\n    const catalogDict = this.pdfReader.queryDictionaryObject(\n      this.pdfReader.getTrailer(),\n      \"Root\"\n    )\n    const pagesDict = this.pdfReader.parseNewObject(\n      catalogDict.queryObject(\"Pages\").getObjectID()\n    )\n    let fieldData = {\n      numPages: pagesDict.queryObject(\"Count\").value,\n    }\n\n    if (catalogDict.exists(\"AcroForm\")) {\n      const context = { nextPageNum: 1, fields: [] }\n\n      this.parsePageTree(context, pagesDict)\n      fieldData.fields = context.fields\n\n      if (options.outputFile) {\n        await this.stripAcroFormAndAnnotations(\n          options.pdfFile,\n          options.outputFile\n        )\n      }\n    } else {\n      fieldData.fields = []\n\n      if (options.outputFile) {\n        await this.fs.copyFile(options.pdfFile, options.outputFile)\n      }\n    }\n\n    if (options.outputFile) {\n      const buf = await this.fs.readFile(options.outputFile)\n\n      fieldData.md5 = md5(buf.buffer)\n    }\n\n    await this.fs.writeFile(\n      options.dataFile,\n      JSON5.stringify(fieldData, undefined, \"  \")\n    )\n  }\n\n  startModifiedDictionaryExcluding(originalDict, excludedKeys) {\n    let originalDictJS = originalDict.toJSObject()\n    let newDict = this.objectsContext.startDictionary()\n\n    Object.getOwnPropertyNames(originalDictJS).forEach((element) => {\n      if (!excludedKeys.includes(element)) {\n        newDict.writeKey(element)\n        this.copyingContext.copyDirectObjectAsIs(originalDictJS[element])\n      }\n    })\n\n    return newDict\n  }\n\n  async strip(options) {\n    assert(\n      options.pdfFile,\n      \"Must specify a PDF from which to remove the AcroForm\"\n    )\n    assert(\n      this.fs.existsSync(options.pdfFile),\n      `File '${options.pdfFile}' does not exist`\n    )\n    assert(options.outputFile, `No output file specified`)\n\n    await this.stripAcroFormAndAnnotations(options.pdfFile, options.outputFile)\n  }\n\n  async stripAcroFormAndAnnotations(pdfFile, outputFile) {\n    // This strips the AcroForm and page annotations as a side-effect\n    // merging them into a new page.\n    const pdfWriter = hummus.createWriter(outputFile)\n    const pdfReader = hummus.createReader(pdfFile)\n    const copyingContext = pdfWriter.createPDFCopyingContext(pdfReader)\n\n    // Next, iterate through the pages from the source document\n    const numPages = pdfReader.getPagesCount()\n\n    for (let i = 0; i < numPages; i++) {\n      const page = pdfReader.parsePage(i)\n      const pageMediaBox = page.getMediaBox()\n      const newPage = pdfWriter.createPage(...pageMediaBox)\n\n      // Merge the page; this will also remove annotations.\n      copyingContext.mergePDFPageToPage(newPage, i)\n      pdfWriter.writePage(newPage)\n    }\n\n    pdfWriter.end()\n  }\n\n  async fill(options) {\n    assert(options.pdfFile, \"Must specify an input PDF file\")\n    assert(\n      this.fs.existsSync(options.pdfFile),\n      `File '${options.pdfFile}' does not exist`\n    )\n    assert(options.outputFile, \"No output file specified\")\n    assert(options.dataFile, \"Must specify a data file\")\n    assert(\n      this.fs.existsSync(options.dataFile),\n      `File '${options.dataFile}' does not exist`\n    )\n\n    let data = options.data\n\n    if (!data) {\n      try {\n        data = await JSON5.parse(\n          await this.fs.readFile(options.dataFile, { encoding: \"utf8\" })\n        )\n      } catch (e) {\n        throw new Error(\n          `Unable to read data file '${options.dataFile}'. ${e.message}`\n        )\n      }\n    }\n\n    if (data.md5) {\n      const buf = await this.fs.readFile(options.pdfFile)\n\n      if (md5(buf.buffer) !== data.md5) {\n        throw new Error(\n          `MD5 for ${options.pdfFile} does not match the one in the data file`\n        )\n      }\n    }\n\n    this.pdfWriter = hummus.createWriterToModify(options.pdfFile, {\n      modifiedFilePath: options.outputFile,\n    })\n    this.pdfReader = this.pdfWriter.getModifiedFileParser()\n\n    let font = null\n    let fontDims = null\n\n    if (options.fontFile) {\n      font = this.pdfWriter.getFontForFile(options.fontFile)\n      fontDims = font.calculateTextDimensions(\"X\", 14)\n    }\n\n    const catalogDict = this.pdfReader\n      .queryDictionaryObject(this.pdfReader.getTrailer(), \"Root\")\n      .toPDFDictionary()\n\n    if (catalogDict.exists(\"AcroForm\")) {\n      this.log.warning(\"PDF still has an AcroForm\")\n    }\n\n    const numPages = this.pdfReader.getPagesCount()\n\n    for (let i = 0; i < numPages; i++) {\n      const page = this.pdfReader.parsePage(i)\n      const pageModifier = new hummus.PDFPageModifier(this.pdfWriter, 0)\n      let pageContext = pageModifier.startContext().getContext()\n      const fields = data.fields.filter((f) => f.page === i)\n\n      for (let field of fields) {\n        const x = field.rect[0]\n        const y = field.rect[1]\n        const w = field.rect[2] - x\n        const h = field.rect[3] - y\n        const rise = h / 4.0\n        const halfH = h / 2\n\n        switch (field.type) {\n          case \"highlight\":\n            pageContext\n              .q()\n              .rg(1, 1, 0.6)\n              .re(x, y, w, h)\n              .f()\n              .Q()\n            break\n          case \"plaintext\":\n            if (!font) {\n              throw new Error(\n                \"Font file must be specified for plaintext fields\"\n              )\n            }\n            pageContext\n              .q()\n              .BT()\n              .g(0)\n              .Tm(1, 0, 0, 1, x, y + rise)\n              .Tf(font, 14)\n              .Tj(field.value || \"\")\n              .ET()\n              .Q()\n            break\n          case \"qrcode\":\n            const pngFileName = await tmp.tmpName({ postfix: \".png\" })\n\n            await QRCode.toFile(pngFileName, field.value || \"\")\n\n            pageModifier.endContext()\n            let imageXObject = this.pdfWriter.createFormXObjectFromPNG(\n              pngFileName\n            )\n            pageContext = pageModifier.startContext().getContext()\n\n            pageContext\n              .q()\n              .cm(1, 0, 0, 1, x, y)\n              .doXObject(imageXObject)\n              .Q()\n\n            fs.unlinkSync(pngFileName)\n            break\n          case \"checkbox\":\n            pageContext\n              .q()\n              .G(0)\n              .w(2.5)\n\n            if (options.checkboxBorders) {\n              pageContext\n                .J(2)\n                .re(x, y, w, h)\n                .S()\n            }\n\n            if (!!field.value) {\n              const dx = w / 5.0\n              const dy = h / 5.0\n\n              pageContext\n                .J(1)\n                .m(x + dx, y + dy)\n                .l(x + w - dx, y + h - dy)\n                .S()\n                .m(x + dx, y + h - dy)\n                .l(x + w - dy, y + dy)\n                .S()\n            }\n\n            pageContext.Q()\n            break\n          case \"signhere\":\n            if (!font) {\n              throw new Error(\"Font file must be specified for signhere fields\")\n            }\n\n            const q = Math.PI / 4.0\n\n            pageModifier.endContext()\n\n            let gsID = this.createOpacityExtGState(0.5)\n            let formXObject = this.pdfWriter.createFormXObject(0, 0, w, h)\n            let gsName = formXObject\n              .getResourcesDictionary()\n              .addExtGStateMapping(gsID)\n\n            formXObject\n              .getContentContext()\n              .q()\n              .gs(gsName)\n              .w(1.0)\n              .G(0)\n              .rg(1, 0.6, 1)\n              .m(0, halfH)\n              .l(halfH, 0)\n              .l(w, 0)\n              .l(w, h)\n              .l(halfH, h)\n              .h()\n              .B()\n              .BT()\n              .g(0)\n              .Tm(1, 0, 0, 1, halfH, halfH - fontDims.height / 2.0)\n              .Tf(font, 12)\n              .Tj(`Sign Here ${field.value || \"\"}`)\n              .ET()\n              .Q()\n            this.pdfWriter.endFormXObject(formXObject)\n\n            pageContext = pageModifier.startContext().getContext()\n\n            pageContext\n              .q()\n              .cm(1, 0, 0, 1, x, y + halfH)\n              .cm(Math.cos(q), Math.sin(q), -Math.sin(q), Math.cos(q), 0, 0)\n              .cm(1, 0, 0, 1, 0, -halfH)\n              // NOTE: The coordinate space of the XObjects is the same as the page!\n              .doXObject(formXObject)\n              .Q()\n            break\n          default:\n            this.log.warning(`Unknown field type ${field.type}`)\n            break\n        }\n      }\n\n      pageModifier.endContext().writePage()\n    }\n\n    this.pdfWriter.end()\n  }\n\n  createOpacityExtGState(opacity) {\n    const context = this.pdfWriter.getObjectsContext()\n    const id = context.startNewIndirectObject()\n    const dict = context.startDictionary()\n\n    dict\n      .writeKey(\"type\")\n      .writeNameValue(\"ExtGState\")\n      .writeKey(\"ca\")\n    context.writeNumber(opacity).endLine()\n    dict.writeKey(\"CA\")\n    context\n      .writeNumber(opacity)\n      .endLine()\n      .endDictionary(dict)\n\n    return id\n  }\n\n  async watermark(options) {\n    assert(\n      options.pdfFile,\n      \"Must specify a PDF from which to remove the AcroForm\"\n    )\n    assert(\n      this.fs.existsSync(options.pdfFile),\n      `File '${options.pdfFile}' does not exist`\n    )\n    assert(options.watermarkFile, \"No watermark file specified\")\n    assert(\n      this.fs.existsSync(options.watermarkFile),\n      `File '${options.watermarkFile}' does not exist`\n    )\n    assert(options.outputFile, \"No output file specified\")\n\n    this.pdfWriter = hummus.createWriter(options.outputFile)\n    this.pdfReader = hummus.createReader(options.pdfFile)\n    const copyingContext = this.pdfWriter.createPDFCopyingContext(\n      this.pdfReader\n    )\n\n    const getPDFPageInfo = (pdfFile, pageNum) => {\n      const pdfReader = this.hummus.createReader(pdfFile)\n      const page = pdfReader.parsePage(pageNum)\n\n      return {\n        mediaBox: page.getMediaBox(),\n      }\n    }\n\n    // First, read in the watermark PDF and create a\n    const watermarkInfo = getPDFPageInfo(options.watermarkFile, 0)\n\n    const formIDs = this.pdfWriter.createFormXObjectsFromPDF(\n      options.watermarkFile,\n      hummus.ePDFPageBoxMediaBox\n    )\n\n    // Next, iterate through the pages from the source document\n    const numPages = this.pdfReader.getPagesCount()\n\n    for (let i = 0; i < numPages; i++) {\n      const page = this.pdfReader.parsePage(i)\n      const pageMediaBox = page.getMediaBox()\n      const newPage = this.pdfWriter.createPage(...pageMediaBox)\n\n      // Merge the page; this will also remove annotations.\n      copyingContext.mergePDFPageToPage(newPage, i)\n\n      const pageContext = this.pdfWriter.startPageContentContext(newPage)\n\n      pageContext\n        .q()\n        .cm(\n          1,\n          0,\n          0,\n          1,\n          (pageMediaBox[2] - watermarkInfo.mediaBox[2]) / 2,\n          (pageMediaBox[3] - watermarkInfo.mediaBox[3]) / 2\n        )\n        .doXObject(\n          newPage.getResourcesDictionary().addFormXObjectMapping(formIDs[0])\n        )\n        .Q()\n\n      this.pdfWriter.writePage(newPage)\n    }\n\n    this.pdfWriter.end()\n  }\n\n  async run(argv) {\n    const options = {\n      string: [\"output-file\", \"watermark-file\", \"data-file\", \"font-file\"],\n      boolean: [\"help\", \"version\", \"checkbox-borders\", \"debug\"],\n      alias: {\n        o: \"output-file\",\n        w: \"watermark-file\",\n        d: \"data-file\",\n        f: \"font-file\",\n        c: \"checkbox-borders\",\n      },\n    }\n\n    const args = parseArgs(argv, options)\n\n    this.debug = args.debug\n\n    let command = \"help\"\n\n    if (args._.length > 0) {\n      command = args._[0].toLowerCase()\n      args._.shift()\n    }\n\n    if (args.version) {\n      this.log.info(`${fullVersion}`)\n      return 0\n    }\n\n    switch (command) {\n      case \"concat\":\n        if (args.help) {\n          this.log.info(`\nUsage: ${this.toolName} concat <pdf1> <pdf2> [<pdf3> ...] [options]\n\nOptions:\n  --output-file, -o  Output PDF file\n\nNotes:\n  File will be concatenated in the order in which they are given.\n`)\n          return 0\n        }\n        return await this.concat({\n          pdfFiles: args._,\n          outputFile: args[\"output-file\"],\n        })\n      case \"fields\":\n        if (args.help) {\n          this.log.info(`\nUsage: ${this.toolName} fields <pdf>\n\nOptions:\n--data-file, -d         Output JSON5 file\n--output-file, -o       Optional output PDF stripped of AcroForm and annotations.\n                        Adds 'md5' field to the output JSON5.\n\nNotes:\nOutputs a JSON5 file containing information for all the AcroForm fields in the document.\nIf an output file is specified a stripped PDF will be generated (see 'strip' command)\nand an MD5 hash for the file will be included in the data file.\n`)\n          return 0\n        }\n        return await this.fields({\n          pdfFile: args._[0],\n          dataFile: args[\"data-file\"],\n          outputFile: args[\"output-file\"],\n        })\n      case \"strip\":\n        if (args.help) {\n          this.log.info(`\nUsage: ${this.toolName} strip <pdf> [options]\n\nOptions:\n  --output-file, -o    Output PDF file\n\nNotes:\nStrips any AcroForm and page annotations from the document.\n`)\n          return 0\n        }\n        return await this.strip({\n          pdfFile: args._[0],\n          outputFile: args[\"output-file\"],\n        })\n      case \"watermark\":\n        if (args.help) {\n          this.log.info(`\nUsage: ${this.toolName} watermark <pdf> [options]\n\nOptions:\n  --watermark-file , -w   Watermarked PDF document\n  --output-file, -o       Output PDF file\n\nNotes:\nAdds a watermark images to the existing content of each page of the given PDF.\n`)\n          return 0\n        }\n        return await this.watermark({\n          pdfFile: args._[0],\n          watermarkFile: args[\"watermark-file\"],\n          outputFile: args[\"output-file\"],\n        })\n      case \"fill\":\n        if (args.help) {\n          this.log.info(`\nUsage: ${this.toolName} fill <pdf> [options]\n\nOptions:\n--output-file, -o       Output PDF file\n--data-file, -d         Input JSON5 data file\n--font-file, -f         Input font file name to use for text fields\n--checkbox-borders, -c  Put borders around checkboxes\n\nNotes:\nInserts 'form' data into the pages of the PDF.\n`)\n          return 0\n        }\n        return await this.fill({\n          pdfFile: args._[0],\n          outputFile: args[\"output-file\"],\n          dataFile: args[\"data-file\"],\n          fontFile: args[\"font-file\"],\n          checkboxBorders: !!args[\"checkbox-borders\"],\n        })\n      case \"help\":\n        this.log.info(`\nUsage: ${this.toolName} <cmd> [options]\n\nCommands:\nhelp              Shows this help\nconcat            Concatenate two or more PDFs\nfields            Extract the field data from a PDF and optionally\n                  create a PDF stripped of its AcroForm and annotations.\n                  Generates an MD5 hash for the stripped PDF.\nstrip             Strip an AcroForm from a PDF\nwatermark         Add a watermark to every page of a PDF. Strips\n                  AcroForms and annotations in the resulting file.\nfill              Fill-in \"fields\" defined in a JSON5 file with data,\n                  checking against existing MD5 has for changes.\n\nGlobal Options:\n  --help          Shows this help.\n  --version       Shows the tool version.\n`)\n        return 0\n      default:\n        this.log.error(\n          `Unknown command ${command}.  Use --help to see available commands`\n        )\n        return -1\n    }\n\n    return 0\n  }\n}\n"],"file":"PDFTool.js"}