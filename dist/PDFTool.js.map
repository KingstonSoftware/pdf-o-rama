{"version":3,"sources":["../src/PDFTool.js"],"names":["fs","readFileAsync","util","promisify","readFile","writeFileAsync","writeFile","toText","item","getType","hummus","ePDFObjectLiteralString","toPDFLiteralString","ePDFObjectHexString","toPDFHexString","value","PDFTool","autobind","constructor","toolName","log","run","argv","options","string","boolean","alias","o","w","d","f","c","args","command","_","length","toLowerCase","shift","version","info","fullVersion","help","concat","fields","strip","watermark","fill","error","fileNames","fileName","existsSync","outputFile","pdfWriter","createWriter","appendPDFPagesFromPDF","end","dataFileName","outputFileName","pdfReader","createReader","catalogDict","queryDictionaryObject","getTrailer","toPDFDictionary","exists","acroformDict","fieldsArray","toPDFArray","numPages","getPagesCount","pageMap","i","getPageObjectID","fieldData","parseFieldsArray","stripAcroFormAndAnnotations","buf","md5","buffer","JSON","stringify","undefined","startModifiedDictionaryExcluding","originalDict","excludedKeys","originalDictJS","toJSObject","newDict","objectsContext","startDictionary","Object","getOwnPropertyNames","forEach","element","includes","writeKey","copyingContext","copyDirectObjectAsIs","createPDFCopyingContext","page","parsePage","pageMediaBox","getMediaBox","newPage","createPage","mergePDFPageToPage","writePage","jsonFileName","fontFileName","checkboxBorders","data","JSON5","parse","encoding","e","message","createWriterToModify","modifiedFilePath","getModifiedFileParser","font","fontDims","getFontForFile","calculateTextDimensions","warning","pageModifier","PDFPageModifier","pageContext","startContext","getContext","filter","field","x","rect","y","h","rise","halfH","type","q","rg","re","Q","BT","g","Tm","Tf","Tj","ET","pngFileName","tmp","tmpName","postfix","QRCode","toFile","endContext","imageXObject","createFormXObjectFromPNG","cm","doXObject","unlinkSync","G","J","S","dx","dy","m","l","Math","PI","gsID","createOpacityExtGState","formXObject","createFormXObject","gsName","getResourcesDictionary","addExtGStateMapping","getContentContext","gs","B","height","endFormXObject","cos","sin","opacity","context","getObjectsContext","id","startNewIndirectObject","dict","writeNameValue","writeNumber","endLine","endDictionary","watermarkFileName","watermarkInfo","getPDFPageInfo","formIDs","createFormXObjectsFromPDF","ePDFPageBoxMediaBox","startPageContentContext","mediaBox","addFormXObjectMapping","pageNum","parseKids","fieldDictionary","inheritedProperties","baseFieldName","localEnv","queryObject","toString","toNumber","result","parseOnOffValue","parseRadioButtonValue","kidsArray","getLength","widgetDictionary","queryArrayObject","apDictionary","nAppearances","parseTextFieldValue","fieldName","valueField","ePDFObjectStream","bytes","readStream","startReadingFromStream","toPDFStream","notEnded","readData","read","push","PDFTextString","parseChoiceValue","ePDFObjectArray","arrayOfStrings","toJSArray","map","parseFieldsValueData","flags","localFieldType","fieldType","parseField","fieldNameT","fieldNameTU","fieldNameTM","fieldFlags","fieldRect","fieldP","toPDFIndirectObjectReference","getObjectID","r","name","fullName","kids","fieldResult"],"mappings":"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","file":"PDFTool.js","sourcesContent":["import parseArgs from \"minimist\"\nimport { fullVersion } from \"./version\"\nimport path from \"path\"\nimport fs from \"fs\"\nimport process from \"process\"\nimport tmp from \"tmp-promise\"\nimport hummus from \"hummus\"\nimport util from \"util\"\nimport JSON5 from \"json5\"\nimport QRCode from \"qrcode\"\nimport md5 from \"md5\"\nimport autobind from \"autobind-decorator\"\n\nfs.readFileAsync = util.promisify(fs.readFile)\nfs.writeFileAsync = util.promisify(fs.writeFile)\n\nfunction toText(item) {\n  if (item.getType() === hummus.ePDFObjectLiteralString) {\n    return item.toPDFLiteralString().toText()\n  } else if (item.getType() === hummus.ePDFObjectHexString) {\n    return item.toPDFHexString().toText()\n  } else {\n    return item.value\n  }\n}\n\n@autobind\nexport class PDFTool {\n  constructor(toolName, log) {\n    this.toolName = toolName\n    this.log = log\n  }\n\n  async run(argv) {\n    const options = {\n      string: [\"output-file\", \"watermark-file\", \"data-file\", \"font-file\"],\n      boolean: [\"help\", \"version\", \"checkbox-borders\"],\n      alias: {\n        o: \"output-file\",\n        w: \"watermark-file\",\n        d: \"data-file\",\n        f: \"font-file\",\n        c: \"checkbox-borders\",\n      },\n    }\n\n    this.args = parseArgs(argv, options)\n\n    let command = \"help\"\n\n    if (this.args._.length > 0) {\n      command = this.args._[0].toLowerCase()\n      this.args._.shift()\n    }\n\n    if (this.args.version) {\n      this.log.info(`${fullVersion}`)\n      return 0\n    }\n\n    switch (command) {\n      case \"concat\":\n        if (this.args.help) {\n          this.log.info(`\nUsage: ${this.toolName} concat <pdf1> <pdf2> [<pdf3> ...] [options]\n\nOptions:\n  --output-file, -o  Output PDF file\n\nNotes:\n  File will be concatenated in the order in which they are given.\n`)\n          return 0\n        }\n        return await this.concat()\n      case \"fields\":\n        if (this.args.help) {\n          this.log.info(`\nUsage: ${this.toolName} fields <pdf>\n\nOptions:\n--data-file, -d         Output JSON file\n--output-file, -o       Optional output PDF stripped of AcroForm and annotations.\n                        Adds 'md5' field to the output JSON.\n\nNotes:\nOutputs a JSON file containing information for all the AcroForm fields in the document.\nIf an output file is specified a stripped PDF will be generated (see 'strip' command)\nand an MD5 hash for the file will be included in the data file.\n`)\n          return 0\n        }\n        return await this.fields()\n      case \"strip\":\n        if (this.args.help) {\n          this.log.info(`\nUsage: ${this.toolName} strip <pdf> [options]\n\nOptions:\n  --output-file, -o    Output PDF file\n\nNotes:\nStrips any AcroForm and page annotations from the document.\n`)\n          return 0\n        }\n        return await this.strip()\n      case \"watermark\":\n        if (this.args.help) {\n          this.log.info(`\nUsage: ${this.toolName} watermark <pdf> [options]\n\nOptions:\n  --watermark-file , -w   Watermarked PDF document\n  --output-file, -o       Output PDF file\n\nNotes:\nAdds a watermark images to the existing content of each page of the given PDF.\n`)\n          return 0\n        }\n        return await this.watermark()\n      case \"fill\":\n        if (this.args.help) {\n          this.log.info(`\nUsage: ${this.toolName} fill <pdf> [options]\n\nOptions:\n--output-file, -o       Output PDF file\n--data-file, -d         Input JSON/JSON5 data file\n--font-file, -f         Input font file name to use for text fields\n--checkbox-borders, -c  Put borders around checkboxes\n\nNotes:\nInserts 'form' data into the pages of the PDF.\n`)\n          return 0\n        }\n        return await this.fill()\n      case \"help\":\n        this.log.info(`\nUsage: ${this.toolName} <cmd> [options]\n\nCommands:\nhelp              Shows this help\nconcat            Concatenate two or more PDFs\nfields            Extract the field data from a PDF and optionally\n                  create a PDF stripped of its AcroForm and annotations.\n                  Generates an MD5 hash for the stripped PDF.\nstrip             Strip an AcroForm from a PDF\nwatermark         Add a watermark to every page of a PDF. Strips\n                  AcroForms and annotations in the resulting file.\nfill              Fill-in \"fields\" defined in a JSON5 file with data,\n                  checking against existing MD5 has for changes.\n\nGlobal Options:\n  --help          Shows this help.\n  --version       Shows the tool version.\n`)\n        return 0\n      default:\n        this.log.error(\n          `Unknown command ${command}.  Use --help to see available commands`\n        )\n        return -1\n    }\n\n    return 0\n  }\n\n  async concat() {\n    const fileNames = this.args._\n\n    if (fileNames.length < 2) {\n      this.log.error(\"Must specify at least two PDF files to concatenate\")\n      return -1\n    }\n\n    for (let fileName of fileNames) {\n      if (!fs.existsSync(fileName)) {\n        this.log.error(`File '${fileName}' does not exist`)\n        return -1\n      }\n    }\n\n    const outputFile = this.args[\"output-file\"]\n\n    if (!outputFile) {\n      this.log.error(\"No output file specified\")\n      return -1\n    }\n\n    const pdfWriter = hummus.createWriter(outputFile)\n\n    for (let fileName of fileNames) {\n      pdfWriter.appendPDFPagesFromPDF(fileName)\n    }\n\n    pdfWriter.end()\n  }\n\n  async fields() {\n    const fileName = this.args._[0]\n\n    if (!fileName) {\n      this.log.error(\"Must specify a PDF from which to extract information\")\n      return -1\n    }\n\n    if (!fs.existsSync(fileName)) {\n      this.log.error(`File '${fileName}' does not exist`)\n      return -1\n    }\n\n    const dataFileName = this.args[\"data-file\"]\n\n    if (!dataFileName) {\n      this.log.error(`No output data file specified`)\n      return -1\n    }\n\n    const outputFileName = this.args[\"output-file\"]\n\n    this.pdfReader = hummus.createReader(fileName)\n\n    const catalogDict = this.pdfReader\n      .queryDictionaryObject(this.pdfReader.getTrailer(), \"Root\")\n      .toPDFDictionary()\n\n    if (!catalogDict.exists(\"AcroForm\")) {\n      this.log.error(\"PDF does not have an AcroForm\")\n      return -1\n    }\n\n    this.acroformDict = this.pdfReader\n      .queryDictionaryObject(catalogDict, \"AcroForm\")\n      .toPDFDictionary()\n\n    let fieldsArray = this.acroformDict.exists(\"Fields\")\n      ? this.pdfReader\n          .queryDictionaryObject(this.acroformDict, \"Fields\")\n          .toPDFArray()\n      : null\n\n    // Page map is used to get page number from page object ID\n    const numPages = this.pdfReader.getPagesCount()\n\n    this.pageMap = {}\n    for (let i = 0; i < numPages; i++) {\n      this.pageMap[this.pdfReader.getPageObjectID(i)] = i\n    }\n\n    let fieldData = {}\n\n    fieldData.numPages = numPages\n    fieldData.fields = this.parseFieldsArray(fieldsArray, {}, \"\")\n\n    if (outputFileName) {\n      await this.stripAcroFormAndAnnotations(fileName, outputFileName)\n      const buf = await fs.readFileAsync(outputFileName)\n      fieldData.md5 = md5(buf.buffer)\n    }\n\n    await fs.writeFileAsync(\n      dataFileName,\n      JSON.stringify(fieldData, undefined, \"  \")\n    )\n\n    return 0\n  }\n\n  startModifiedDictionaryExcluding(originalDict, excludedKeys) {\n    let originalDictJS = originalDict.toJSObject()\n    let newDict = this.objectsContext.startDictionary()\n\n    Object.getOwnPropertyNames(originalDictJS).forEach((element) => {\n      if (!excludedKeys.includes(element)) {\n        newDict.writeKey(element)\n        this.copyingContext.copyDirectObjectAsIs(originalDictJS[element])\n      }\n    })\n\n    return newDict\n  }\n\n  async strip() {\n    const fileName = this.args._[0]\n\n    if (!fileName) {\n      this.log.error(\"Must specify a PDF from which to remove the AcroForm\")\n      return -1\n    }\n\n    if (!fs.existsSync(fileName)) {\n      this.log.error(`File '${fileName}' does not exist`)\n      return -1\n    }\n\n    const outputFileName = this.args[\"output-file\"]\n\n    if (!outputFileName) {\n      this.log.error(`No output file specified`)\n      return -1\n    }\n\n    await this.stripAcroFormAndAnnotations(fileName, outputFileName)\n\n    return 0\n  }\n\n  async stripAcroFormAndAnnotations(fileName, outputFileName) {\n    // This strips the AcroForm and page annotations as a side-effect\n    // merging them into a new page.\n    const pdfWriter = hummus.createWriter(outputFileName)\n    const pdfReader = hummus.createReader(fileName)\n    const copyingContext = pdfWriter.createPDFCopyingContext(pdfReader)\n\n    // Next, iterate through the pages from the source document\n    const numPages = pdfReader.getPagesCount()\n\n    for (let i = 0; i < numPages; i++) {\n      const page = pdfReader.parsePage(i)\n      const pageMediaBox = page.getMediaBox()\n      const newPage = pdfWriter.createPage(...pageMediaBox)\n\n      // Merge the page; this will also remove annotations.\n      copyingContext.mergePDFPageToPage(newPage, i)\n      pdfWriter.writePage(newPage)\n    }\n\n    pdfWriter.end()\n  }\n\n  async fill() {\n    const fileName = this.args._[0]\n\n    if (!fileName) {\n      this.log.error(\"Must specify an input PDF file\")\n      return -1\n    }\n\n    if (!fs.existsSync(fileName)) {\n      this.log.error(`File '${fileName}' does not exist`)\n      return -1\n    }\n\n    const outputFileName = this.args[\"output-file\"]\n\n    if (!outputFileName) {\n      this.log.error(\"No output file specified\")\n      return -1\n    }\n\n    const jsonFileName = this.args[\"data-file\"]\n\n    if (!jsonFileName) {\n      this.log.error(\"Must specify a data file\")\n      return -1\n    }\n\n    if (!fs.existsSync(jsonFileName)) {\n      this.log.error(`File '${jsonFileName}' does not exist`)\n      return -1\n    }\n\n    const fontFileName = this.args[\"font-file\"]\n    const checkboxBorders = !!this.args[\"checkbox-borders\"]\n\n    let data = null\n\n    try {\n      data = await JSON5.parse(\n        await fs.readFileAsync(jsonFileName, { encoding: \"utf8\" })\n      )\n    } catch (e) {\n      this.log.error(`Unable to read data file '${jsonFileName}'. ${e.message}`)\n      return -1\n    }\n\n    if (data.md5) {\n      const buf = await fs.readFileAsync(fileName)\n\n      if (md5(buf.buffer) !== data.md5) {\n        this.log.error(\n          `MD5 for ${fileName} does not match the one in the data file`\n        )\n        return -1\n      }\n    }\n\n    this.pdfWriter = hummus.createWriterToModify(fileName, {\n      modifiedFilePath: outputFileName,\n    })\n    this.pdfReader = this.pdfWriter.getModifiedFileParser()\n\n    let font = null\n    let fontDims = null\n\n    if (fontFileName) {\n      font = this.pdfWriter.getFontForFile(fontFileName)\n      fontDims = font.calculateTextDimensions(\"X\", 14)\n    }\n\n    const catalogDict = this.pdfReader\n      .queryDictionaryObject(this.pdfReader.getTrailer(), \"Root\")\n      .toPDFDictionary()\n\n    if (catalogDict.exists(\"AcroForm\")) {\n      this.log.warning(\"PDF still has an AcroForm\")\n    }\n\n    const numPages = this.pdfReader.getPagesCount()\n\n    for (let i = 0; i < numPages; i++) {\n      const page = this.pdfReader.parsePage(i)\n      const pageModifier = new hummus.PDFPageModifier(this.pdfWriter, 0)\n      let pageContext = pageModifier.startContext().getContext()\n      const fields = data.fields.filter((f) => f.page === i)\n\n      for (let field of fields) {\n        const x = field.rect[0]\n        const y = field.rect[1]\n        const w = field.rect[2] - x\n        const h = field.rect[3] - y\n        const rise = h / 4.0\n        const halfH = h / 2\n\n        switch (field.type) {\n          case \"highlight\":\n            pageContext\n              .q()\n              .rg(1, 1, 0.6)\n              .re(x, y, w, h)\n              .f()\n              .Q()\n            break\n          case \"plaintext\":\n            if (!font) {\n              this.log.error(\"Font file must be specified for plaintext fields\")\n              return -1\n            }\n            pageContext\n              .q()\n              .BT()\n              .g(0)\n              .Tm(1, 0, 0, 1, x, y + rise)\n              .Tf(font, 14)\n              .Tj(field.value)\n              .ET()\n              .Q()\n            break\n          case \"qrcode\":\n            const pngFileName = await tmp.tmpName({ postfix: \".png\" })\n\n            await QRCode.toFile(pngFileName, field.value)\n\n            pageModifier.endContext()\n            let imageXObject = this.pdfWriter.createFormXObjectFromPNG(\n              pngFileName\n            )\n            pageContext = pageModifier.startContext().getContext()\n\n            pageContext\n              .q()\n              .cm(1, 0, 0, 1, x, y)\n              .doXObject(imageXObject)\n              .Q()\n\n            fs.unlinkSync(pngFileName)\n            break\n          case \"checkbox\":\n            pageContext\n              .q()\n              .G(0)\n              .w(2.5)\n\n            if (checkboxBorders) {\n              pageContext\n                .J(2)\n                .re(x, y, w, h)\n                .S()\n            }\n\n            if (!!field.value) {\n              const dx = w / 5.0\n              const dy = h / 5.0\n\n              pageContext\n                .J(1)\n                .m(x + dx, y + dy)\n                .l(x + w - dx, y + h - dy)\n                .S()\n                .m(x + dx, y + h - dy)\n                .l(x + w - dy, y + dy)\n                .S()\n            }\n\n            pageContext.Q()\n            break\n          case \"signhere\":\n            if (!font) {\n              this.log.error(\"Font file must be specified for signhere fields\")\n              return -1\n            }\n\n            const q = Math.PI / 4.0\n\n            pageModifier.endContext()\n\n            let gsID = this.createOpacityExtGState(0.5)\n            let formXObject = this.pdfWriter.createFormXObject(0, 0, w, h)\n            let gsName = formXObject\n              .getResourcesDictionary()\n              .addExtGStateMapping(gsID)\n\n            formXObject\n              .getContentContext()\n              .q()\n              .gs(gsName)\n              .w(1.0)\n              .G(0)\n              .rg(1, 0.6, 1)\n              .m(0, halfH)\n              .l(halfH, 0)\n              .l(w, 0)\n              .l(w, h)\n              .l(halfH, h)\n              .h()\n              .B()\n              .BT()\n              .g(0)\n              .Tm(1, 0, 0, 1, halfH, halfH - fontDims.height / 2.0)\n              .Tf(font, 12)\n              .Tj(`Sign Here ${field.value}`)\n              .ET()\n              .Q()\n            this.pdfWriter.endFormXObject(formXObject)\n\n            pageContext = pageModifier.startContext().getContext()\n\n            pageContext\n              .q()\n              .cm(1, 0, 0, 1, x, y + halfH)\n              .cm(Math.cos(q), Math.sin(q), -Math.sin(q), Math.cos(q), 0, 0)\n              .cm(1, 0, 0, 1, 0, -halfH)\n              // NOTE: The coordinate space of the XObjects is the same as the page!\n              .doXObject(formXObject)\n              .Q()\n            break\n          default:\n            this.log.warning(`Unknown field type ${field.type}`)\n            break\n        }\n      }\n\n      pageModifier.endContext().writePage()\n    }\n\n    this.pdfWriter.end()\n  }\n\n  createOpacityExtGState(opacity) {\n    const context = this.pdfWriter.getObjectsContext()\n    const id = context.startNewIndirectObject()\n    const dict = context.startDictionary()\n\n    dict\n      .writeKey(\"type\")\n      .writeNameValue(\"ExtGState\")\n      .writeKey(\"ca\")\n    context.writeNumber(opacity).endLine()\n    dict.writeKey(\"CA\")\n    context\n      .writeNumber(opacity)\n      .endLine()\n      .endDictionary(dict)\n\n    return id\n  }\n\n  async watermark() {\n    const fileName = this.args._[0]\n\n    if (!fileName) {\n      this.log.error(\"Must specify a PDF from which to remove the AcroForm\")\n      return -1\n    }\n\n    if (!fs.existsSync(fileName)) {\n      this.log.error(`File '${fileName}' does not exist`)\n      return -1\n    }\n\n    const watermarkFileName = this.args[\"watermark-file\"]\n\n    if (!watermarkFileName) {\n      this.log.error(\"No watermark file specified\")\n      return -1\n    }\n\n    if (!fs.existsSync(watermarkFileName)) {\n      this.log.error(`File '${watermarkFileName}' does not exist`)\n      return -1\n    }\n\n    const outputFileName = this.args[\"output-file\"]\n\n    if (!outputFileName) {\n      this.log.error(\"No output file specified\")\n      return -1\n    }\n\n    this.pdfWriter = hummus.createWriter(outputFileName)\n    this.pdfReader = hummus.createReader(fileName)\n    const copyingContext = this.pdfWriter.createPDFCopyingContext(\n      this.pdfReader\n    )\n\n    // First, read in the watermark PDF and create a\n    const watermarkInfo = this.getPDFPageInfo(watermarkFileName, 0)\n\n    const formIDs = this.pdfWriter.createFormXObjectsFromPDF(\n      watermarkFileName,\n      hummus.ePDFPageBoxMediaBox\n    )\n\n    // Next, iterate through the pages from the source document\n    const numPages = this.pdfReader.getPagesCount()\n\n    for (let i = 0; i < numPages; i++) {\n      const page = this.pdfReader.parsePage(i)\n      const pageMediaBox = page.getMediaBox()\n      const newPage = this.pdfWriter.createPage(...pageMediaBox)\n\n      // Merge the page; this will also remove annotations.\n      copyingContext.mergePDFPageToPage(newPage, i)\n\n      const pageContext = this.pdfWriter.startPageContentContext(newPage)\n\n      pageContext\n        .q()\n        .cm(\n          1,\n          0,\n          0,\n          1,\n          (pageMediaBox[2] - watermarkInfo.mediaBox[2]) / 2,\n          (pageMediaBox[3] - watermarkInfo.mediaBox[3]) / 2\n        )\n        .doXObject(\n          newPage.getResourcesDictionary().addFormXObjectMapping(formIDs[0])\n        )\n        .Q()\n\n      this.pdfWriter.writePage(newPage)\n    }\n\n    this.pdfWriter.end()\n    return 0\n  }\n\n  getPDFPageInfo(fileName, pageNum) {\n    const pdfReader = hummus.createReader(fileName)\n    const page = pdfReader.parsePage(pageNum)\n\n    return {\n      mediaBox: page.getMediaBox(),\n    }\n  }\n\n  parseKids(fieldDictionary, inheritedProperties, baseFieldName) {\n    let localEnv = {}\n\n    if (fieldDictionary.exists(\"FT\")) {\n      localEnv[\"FT\"] = fieldDictionary.queryObject(\"FT\").toString()\n    }\n    if (fieldDictionary.exists(\"Ff\")) {\n      localEnv[\"Ff\"] = fieldDictionary.queryObject(\"Ff\").toNumber()\n    }\n    if (fieldDictionary.exists(\"DA\")) {\n      localEnv[\"DA\"] = toText(fieldDictionary.queryObject(\"DA\"))\n    }\n    if (fieldDictionary.exists(\"Opt\")) {\n      localEnv[\"Opt\"] = fieldDictionary.queryObject(\"Opt\").toPDFArray()\n    }\n\n    let result = this.parseFieldsArray(\n      this.pdfReader\n        .queryDictionaryObject(fieldDictionary, \"Kids\")\n        .toPDFArray(),\n      { ...inheritedProperties, ...localEnv },\n      baseFieldName\n    )\n\n    return result\n  }\n\n  parseOnOffValue(fieldDictionary) {\n    if (fieldDictionary.exists(\"V\")) {\n      let value = fieldDictionary.queryObject(\"V\").toString()\n      if (value === \"Off\" || value === \"\") {\n        return false\n      } else {\n        return true\n      }\n    } else {\n      return null\n    }\n  }\n\n  parseRadioButtonValue(fieldDictionary) {\n    if (fieldDictionary.exists(\"V\")) {\n      let value = fieldDictionary.queryObject(\"V\").toString()\n\n      if (value === \"Off\" || value === \"\") {\n        return null\n      } else {\n        // using true cause sometimes these are actually checkboxes, and there's no underlying kids\n        let result = true\n        // for radio button this would be an appearance name of a radio button that's turned on. we wanna look for it\n        if (fieldDictionary.exists(\"Kids\")) {\n          let kidsArray = this.pdfReader\n            .queryDictionaryObject(fieldDictionary, \"Kids\")\n            .toPDFArray()\n\n          for (let i = 0; i < kidsArray.getLength(); ++i) {\n            let widgetDictionary = this.pdfReader\n              .queryArrayObject(kidsArray, i)\n              .toPDFDictionary()\n            // use the dictionary Ap/N dictionary for looking up the appearance stream name\n            let apDictionary = this.pdfReader\n              .queryDictionaryObject(widgetDictionary, \"AP\")\n              .toPDFDictionary()\n            let nAppearances = this.pdfReader\n              .queryDictionaryObject(apDictionary, \"N\")\n              .toPDFDictionary()\n\n            if (nAppearances.exists(value)) {\n              // Found!\n              result = i // save the selected index as value\n              break\n            }\n          }\n        }\n\n        return result\n      }\n    } else {\n      return null\n    }\n  }\n\n  parseTextFieldValue(fieldDictionary, fieldName) {\n    // grab field value, may be either a text string or a text stream\n    if (!fieldDictionary.exists(fieldName)) {\n      return null\n    }\n\n    let valueField = this.pdfReader.queryDictionaryObject(\n      fieldDictionary,\n      fieldName\n    )\n\n    if (valueField.getType() == hummus.ePDFObjectLiteralString) {\n      return toText(valueField)\n    } else if (valueField.getType() == hummus.ePDFObjectStream) {\n      let bytes = []\n      let readStream = pdfReader.startReadingFromStream(\n        valueField.toPDFStream()\n      )\n\n      while (readStream.notEnded()) {\n        const readData = readStream.read(1)\n        // do something with the data\n        bytes.push(readData[0])\n      }\n      return new PDFTextString(bytes).toString()\n    } else {\n      return null\n    }\n  }\n\n  parseChoiceValue(fieldDictionary) {\n    if (fieldDictionary.exists(\"V\")) {\n      let valueField = this.pdfReader.queryDictionaryObject(\n        fieldDictionary,\n        \"V\"\n      )\n\n      if (\n        valueField.getType() == hummus.ePDFObjectLiteralString ||\n        valueField.getType() == hummus.ePDFObjectHexString\n      ) {\n        // text string. read into value\n        return toText(valueField)\n      } else if (valueField.getType == hummus.ePDFObjectArray) {\n        let arrayOfStrings = valueField.toPDFArray().toJSArray()\n        return arrayOfStrings.map(toText)\n      } else {\n        return undefined\n      }\n    } else {\n      return undefined\n    }\n  }\n\n  parseFieldsValueData(result, fieldDictionary, flags, inheritedProperties) {\n    const localFieldType = fieldDictionary.exists(\"FT\")\n      ? fieldDictionary.queryObject(\"FT\").toString()\n      : undefined\n    const fieldType = localFieldType || inheritedProperties[\"FT\"]\n\n    if (!fieldType) {\n      return null // k. must be a widget\n    }\n\n    switch (fieldType) {\n      case \"Btn\": {\n        if ((flags >> 16) & 1) {\n          // push button\n          result[\"type\"] = \"button\"\n          // no value\n        } else if ((flags >> 15) & 1) {\n          // radio button\n          result[\"type\"] = \"radio\"\n          result[\"value\"] = this.parseRadioButtonValue(fieldDictionary)\n        } else {\n          // checkbox\n          result[\"type\"] = \"checkbox\"\n          result[\"value\"] = this.parseOnOffValue(fieldDictionary)\n        }\n        break\n      }\n      case \"Tx\": {\n        // result['isFileSelect'] = !!(flags>>20 & 1)\n        if ((flags >> 25) & 1) {\n          result[\"type\"] = \"richtext\"\n          // rich text, value in 'RV'\n          result[\"value\"] = this.parseTextFieldValue(fieldDictionary, \"RV\")\n          result[\"plainValue\"] = this.parseTextFieldValue(fieldDictionary, \"V\")\n        } else {\n          result[\"type\"] = \"plaintext\"\n          result[\"value\"] = this.parseTextFieldValue(fieldDictionary, \"V\")\n        }\n\n        break\n      }\n      case \"Ch\": {\n        result[\"type\"] = \"choice\"\n        result[\"value\"] = this.parseChoiceValue(fieldDictionary)\n        break\n      }\n      case \"Sig\": {\n        result[\"type\"] = \"signature\"\n        break\n      }\n    }\n  }\n\n  parseField(fieldDictionary, inheritedProperties, baseFieldName) {\n    let fieldNameT = fieldDictionary.exists(\"T\")\n      ? toText(fieldDictionary.queryObject(\"T\"))\n      : undefined\n    let fieldNameTU = fieldDictionary.exists(\"TU\")\n      ? toText(fieldDictionary.queryObject(\"TU\"))\n      : undefined\n    let fieldNameTM = fieldDictionary.exists(\"TM\")\n      ? toText(fieldDictionary.queryObject(\"TM\"))\n      : undefined\n    let fieldFlags = fieldDictionary.exists(\"Ff\")\n      ? fieldDictionary.queryObject(\"Ff\").toNumber()\n      : undefined\n    let fieldRect = fieldDictionary.exists(\"Rect\")\n      ? fieldDictionary\n          .queryObject(\"Rect\")\n          .toPDFArray()\n          .toJSArray()\n      : undefined\n    let fieldP = fieldDictionary.exists(\"P\")\n      ? fieldDictionary\n          .queryObject(\"P\")\n          .toPDFIndirectObjectReference()\n          .getObjectID()\n      : undefined\n\n    fieldFlags =\n      fieldFlags === undefined ? inheritedProperties[\"Ff\"] : fieldFlags\n    fieldFlags = fieldFlags || 0\n\n    if (fieldRect) {\n      fieldRect = fieldRect.map((r) => r.value)\n    }\n\n    // Assume that if there's no T and no Kids, this is a widget annotation which is not a field\n    if (\n      fieldNameT === undefined &&\n      !fieldDictionary.exists(\"Kids\") &&\n      fieldDictionary.exists(\"Subtype\") &&\n      fieldDictionary.queryObject(\"Subtype\").toString() == \"Widget\"\n    ) {\n      return null\n    }\n\n    let result = {\n      name: fieldNameT,\n      fullName:\n        fieldNameT === undefined ? undefined : baseFieldName + fieldNameT,\n      //alternateName: fieldNameTU,\n      //mappingName: fieldNameTM,\n      //isNoExport: !!((fieldFlags>>2) & 1),\n      rect: fieldRect,\n      page: this.pageMap[fieldP],\n    }\n\n    if (fieldDictionary.exists(\"Kids\")) {\n      let kids = this.parseKids(\n        fieldDictionary,\n        inheritedProperties,\n        baseFieldName + fieldNameT + \".\"\n      )\n\n      if (kids) {\n        // that would be a non terminal node, otherwise all kids are annotations an null would be returned\n        result[\"kids\"] = kids\n      } else {\n        // a terminal node, so kids array returned empty\n        this.parseFieldsValueData(\n          result,\n          fieldDictionary,\n          fieldFlags,\n          inheritedProperties\n        )\n      }\n    } else {\n      // read fields value data\n      this.parseFieldsValueData(\n        result,\n        fieldDictionary,\n        fieldFlags,\n        inheritedProperties\n      )\n    }\n\n    return result\n  }\n\n  parseFieldsArray(fieldsArray, inheritedProperties, baseFieldName) {\n    let result = []\n\n    for (let i = 0; i < fieldsArray.getLength(); ++i) {\n      let fieldResult = this.parseField(\n        this.pdfReader.queryArrayObject(fieldsArray, i).toPDFDictionary(),\n        inheritedProperties,\n        baseFieldName\n      )\n\n      if (fieldResult) {\n        result.push(fieldResult)\n      }\n    }\n\n    return result\n  }\n}\n"]}