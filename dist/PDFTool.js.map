{"version":3,"sources":["../src/PDFTool.js"],"names":["readFileAsync","promisify","readFile","writeFileAsync","writeFile","toText","item","getType","ePDFObjectLiteralString","toPDFLiteralString","ePDFObjectHexString","toPDFHexString","value","PDFTool","constructor","toolName","log","run","argv","options","string","boolean","alias","args","command","_","length","toLowerCase","shift","version","info","help","concat","fields","strip","watermark","fill","error","fileNames","fileName","existsSync","outputFile","pdfWriter","createWriter","appendPDFPagesFromPDF","end","dataFileName","outputFileName","pdfReader","createReader","catalogDict","queryDictionaryObject","getTrailer","toPDFDictionary","exists","acroformDict","fieldsArray","toPDFArray","numPages","getPagesCount","pageMap","i","getPageObjectID","fieldData","parseFieldsArray","stripAcroFormAndAnnotations","md5","JSON","stringify","undefined","startModifiedDictionaryExcluding","originalDict","excludedKeys","originalDictJS","toJSObject","newDict","objectsContext","startDictionary","Object","getOwnPropertyNames","forEach","element","includes","writeKey","copyingContext","copyDirectObjectAsIs","createPDFCopyingContext","page","parsePage","pageMediaBox","getMediaBox","newPage","createPage","mergePDFPageToPage","writePage","jsonFileName","fontFileName","checkboxBorders","data","parse","encoding","e","message","createWriterToModify","modifiedFilePath","getModifiedFileParser","font","fontDims","getFontForFile","calculateTextDimensions","warning","pageModifier","PDFPageModifier","pageContext","startContext","getContext","filter","f","field","x","rect","y","w","h","rise","halfH","type","q","rg","re","Q","BT","g","Tm","Tf","Tj","ET","pngFileName","path","toFile","endContext","imageXObject","createFormXObjectFromPNG","cm","doXObject","unlinkSync","G","J","S","dx","dy","m","l","Math","PI","gsID","createOpacityExtGState","formXObject","createFormXObject","gsName","getResourcesDictionary","addExtGStateMapping","getContentContext","gs","B","height","endFormXObject","cos","sin","opacity","context","getObjectsContext","id","startNewIndirectObject","dict","writeNameValue","writeNumber","endLine","endDictionary","watermarkFileName","watermarkInfo","getPDFPageInfo","formIDs","createFormXObjectsFromPDF","ePDFPageBoxMediaBox","startPageContentContext","mediaBox","addFormXObjectMapping","pageNum","parseKids","fieldDictionary","inheritedProperties","baseFieldName","localEnv","queryObject","toString","toNumber","result","parseOnOffValue","parseRadioButtonValue","kidsArray","getLength","widgetDictionary","queryArrayObject","apDictionary","nAppearances","parseTextFieldValue","fieldName","valueField","ePDFObjectStream","bytes","readStream","startReadingFromStream","toPDFStream","notEnded","readData","read","push","PDFTextString","parseChoiceValue","ePDFObjectArray","arrayOfStrings","toJSArray","map","parseFieldsValueData","flags","localFieldType","fieldType","parseField","fieldNameT","fieldNameTU","fieldNameTM","fieldFlags","fieldRect","fieldP","toPDFIndirectObjectReference","getObjectID","r","name","fullName","kids","fieldResult"],"mappings":"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","file":"PDFTool.js","sourcesContent":["import parseArgs from 'minimist'\nimport { fullVersion } from './version'\nimport path from 'path'\nimport fs from 'fs'\nimport process from 'process'\nimport temp from 'temp'\nimport autoBind from 'auto-bind2'\nimport hummus from 'hummus'\nimport util from 'util'\nimport JSON5 from 'json5'\nimport QRCode from 'qrcode'\nimport md5 from 'md5'\n\nfs.readFileAsync = util.promisify(fs.readFile)\nfs.writeFileAsync = util.promisify(fs.writeFile)\n\nfunction toText(item) {\n  if(item.getType() === hummus.ePDFObjectLiteralString) {\n    return item.toPDFLiteralString().toText()\n  }\n  else if(item.getType() === hummus.ePDFObjectHexString) {\n    return item.toPDFHexString().toText()\n  } else {\n    return item.value\n  }\n}\n\nexport class PDFTool {\n  constructor(toolName, log) {\n    autoBind(this)\n    this.toolName = toolName\n    this.log = log\n  }\n\n  async run(argv) {\n    const options = {\n      string: ['output-file', 'watermark-file', 'data-file', 'font-file' ],\n      boolean: [ 'help', 'version', 'checkbox-borders' ],\n      alias: {\n        'o': 'output-file',\n        'w': 'watermark-file',\n        'd': 'data-file',\n        'f': 'font-file',\n        'c': 'checkbox-borders'\n      }\n    }\n\n    this.args = parseArgs(argv, options)\n\n    let command = 'help'\n\n    if (this.args._.length > 0) {\n      command = this.args._[0].toLowerCase()\n      this.args._.shift()\n    }\n\n    if (this.args.version) {\n      this.log.info(`${fullVersion}`)\n      return 0\n    }\n\n    switch (command) {\n      case 'concat':\n        if (this.args.help) {\n          this.log.info(`\nUsage: ${this.toolName} concat <pdf1> <pdf2> [<pdf3> ...] [options]\n\nOptions:\n  --output-file, -o  Output PDF file\n\nNotes:\n  File will be concatenated in the order in which they are given.\n`)\n          return 0\n        }\n        return await this.concat()\n      case 'fields':\n        if (this.args.help) {\n          this.log.info(`\nUsage: ${this.toolName} fields <pdf>\n\nOptions:\n--data-file, -d         Output JSON file\n--output-file, -o       Optional output PDF stripped of AcroForm and annotations.\n                        Adds 'md5' field to the output JSON.\n\nNotes:\nOutputs a JSON file containing information for all the AcroForm fields in the document.\nIf an output file is specified a stripped PDF will be generated (see 'strip' command)\nand an MD5 hash for the file will be included in the data file.\n`)\n          return 0\n        }\n        return await this.fields()\n      case 'strip':\n        if (this.args.help) {\n          this.log.info(`\nUsage: ${this.toolName} strip <pdf> [options]\n\nOptions:\n  --output-file, -o    Output PDF file\n\nNotes:\nStrips any AcroForm and page annotations from the document.\n`)\n          return 0\n        }\n        return await this.strip()\n      case 'watermark':\n        if (this.args.help) {\n          this.log.info(`\nUsage: ${this.toolName} watermark <pdf> [options]\n\nOptions:\n  --watermark-file , -w   Watermarked PDF document\n  --output-file, -o       Output PDF file\n\nNotes:\nAdds a watermark images to the existing content of each page of the given PDF.\n`)\n          return 0\n        }\n        return await this.watermark()\n      case 'fill':\n      if (this.args.help) {\n        this.log.info(`\nUsage: ${this.toolName} fill <pdf> [options]\n\nOptions:\n--output-file, -o       Output PDF file\n--data-file, -d         Input JSON/JSON5 data file\n--font-file, -f         Input font file name to use for text fields\n--checkbox-borders, -c  Put borders around checkboxes\n\nNotes:\nInserts 'form' data into the pages of the PDF.\n`)\n          return 0\n        }\n        return await this.fill()\n      case 'help':\n        this.log.info(`\nUsage: ${this.toolName} <cmd> [options]\n\nCommands:\nhelp              Shows this help\nconcat            Concatenate two or more PDFs\nfields            Extract the field data from a PDF and optionally\n                  create a PDF stripped of its AcroForm and annotations.\n                  Generates an MD5 hash for the stripped PDF.\nstrip             Strip an AcroForm from a PDF\nwatermark         Add a watermark to every page of a PDF. Strips\n                  AcroForms and annotations in the resulting file.\nfill              Fill-in \"fields\" defined in a JSON5 file with data,\n                  checking against existing MD5 has for changes.\n\nGlobal Options:\n  --help          Shows this help.\n  --version       Shows the tool version.\n`)\n        return 0\n      default:\n        this.log.error(`Unknown command ${command}.  Use --help to see available commands`)\n        return -1\n    }\n\n    return 0\n  }\n\n  async concat() {\n    const fileNames = this.args._\n\n    if (fileNames.length < 2) {\n      this.log.error('Must specify at least two PDF files to concatenate')\n      return -1\n    }\n\n    for (let fileName of fileNames) {\n      if (!fs.existsSync(fileName)) {\n        this.log.error(`File '${fileName}' does not exist`)\n        return -1\n      }\n    }\n\n    const outputFile = this.args['output-file']\n\n    if (!outputFile) {\n      this.log.error('No output file specified')\n      return -1\n    }\n\n    const pdfWriter = hummus.createWriter(outputFile)\n\n    for (let fileName of fileNames) {\n      pdfWriter.appendPDFPagesFromPDF(fileName)\n    }\n\n    pdfWriter.end()\n  }\n\n  async fields() {\n    const fileName = this.args._[0]\n\n    if (!fileName) {\n      this.log.error('Must specify a PDF from which to extract information')\n      return -1\n    }\n\n    if (!fs.existsSync(fileName)) {\n      this.log.error(`File '${fileName}' does not exist`)\n      return -1\n    }\n\n    const dataFileName = this.args['data-file']\n\n    if (!dataFileName) {\n      this.log.error(`No output data file specified`)\n      return -1\n    }\n\n    const outputFileName = this.args['output-file']\n\n    this.pdfReader = hummus.createReader(fileName)\n\n    const catalogDict = this.pdfReader\n      .queryDictionaryObject(this.pdfReader.getTrailer(), 'Root').toPDFDictionary()\n\n    if (!catalogDict.exists('AcroForm')) {\n      this.log.error('PDF does not have an AcroForm')\n      return -1\n    }\n\n    this.acroformDict = this.pdfReader\n      .queryDictionaryObject(catalogDict, 'AcroForm').toPDFDictionary()\n\n    let fieldsArray = this.acroformDict.exists('Fields') ?\n      this.pdfReader.queryDictionaryObject(this.acroformDict, 'Fields').toPDFArray() :\n      null\n\n    // Page map is used to get page number from page object ID\n    const numPages = this.pdfReader.getPagesCount()\n\n    this.pageMap = {}\n    for (let i = 0; i < numPages; i++) {\n      this.pageMap[this.pdfReader.getPageObjectID(i)] = i\n    }\n\n    let fieldData = {}\n\n    fieldData.fields = this.parseFieldsArray(fieldsArray, {}, '')\n\n    if (outputFileName) {\n      await this.stripAcroFormAndAnnotations(fileName, outputFileName)\n      fieldData.md5 = md5(await fs.readFileAsync(outputFileName))\n    }\n\n    await fs.writeFileAsync(dataFileName, JSON.stringify(fieldData, undefined, '  '))\n\n    return 0\n  }\n\n  startModifiedDictionaryExcluding(originalDict, excludedKeys) {\n    let originalDictJS = originalDict.toJSObject()\n    let newDict = this.objectsContext.startDictionary()\n\n    Object.getOwnPropertyNames(originalDictJS).forEach((element) => {\n      if (!excludedKeys.includes(element)) {\n        newDict.writeKey(element)\n        this.copyingContext.copyDirectObjectAsIs(originalDictJS[element])\n      }\n    })\n\n    return newDict\n  }\n\n  async strip() {\n    const fileName = this.args._[0]\n\n    if (!fileName) {\n      this.log.error('Must specify a PDF from which to remove the AcroForm')\n      return -1\n    }\n\n    if (!fs.existsSync(fileName)) {\n      this.log.error(`File '${fileName}' does not exist`)\n      return -1\n    }\n\n    const outputFileName = this.args['output-file']\n\n    if (!outputFileName) {\n      this.log.error(`No output file specified`)\n      return -1\n    }\n\n    await this.stripAcroFormAndAnnotations(fileName, outputFileName)\n\n    return 0\n  }\n\n  async stripAcroFormAndAnnotations(fileName, outputFileName) {\n    // This strips the AcroForm and page annotations as a side-effect\n    // merging them into a new page.\n    const pdfWriter = hummus.createWriter(outputFileName)\n    const pdfReader = hummus.createReader(fileName)\n    const copyingContext = pdfWriter.createPDFCopyingContext(pdfReader)\n\n    // Next, iterate through the pages from the source document\n    const numPages = pdfReader.getPagesCount()\n\n    for (let i = 0; i < numPages; i++) {\n      const page = pdfReader.parsePage(i)\n      const pageMediaBox = page.getMediaBox()\n      const newPage = pdfWriter.createPage(...pageMediaBox)\n\n      // Merge the page; this will also remove annotations.\n      copyingContext.mergePDFPageToPage(newPage, i)\n      pdfWriter.writePage(newPage)\n    }\n\n    pdfWriter.end()\n  }\n\n  async fill() {\n    const fileName = this.args._[0]\n\n    if (!fileName) {\n      this.log.error('Must specify an input PDF file')\n      return -1\n    }\n\n    if (!fs.existsSync(fileName)) {\n      this.log.error(`File '${fileName}' does not exist`)\n      return -1\n    }\n\n    const outputFileName = this.args['output-file']\n\n    if (!outputFileName) {\n      this.log.error('No output file specified')\n      return -1\n    }\n\n    const jsonFileName = this.args['data-file']\n\n    if (!jsonFileName) {\n      this.log.error('Must specify a data file')\n      return -1\n    }\n\n    if (!fs.existsSync(jsonFileName)) {\n      this.log.error(`File '${jsonFileName}' does not exist`)\n      return -1\n    }\n\n    const fontFileName = this.args['font-file']\n    const checkboxBorders = !!this.args['checkbox-borders']\n\n    let data = null\n\n    try {\n      data = await JSON5.parse(await fs.readFileAsync(jsonFileName, { encoding: 'utf8' }))\n    } catch (e) {\n      this.log.error(`Unable to read data file '${jsonFileName}'. ${e.message}`)\n      return -1\n    }\n\n    if (data.md5 && md5(await fs.readFileAsync(fileName)) !== data.md5) {\n      this.log.error(`MD5 for ${fileName} does not match the one in the data file`)\n      return -1\n    }\n\n    this.pdfWriter = hummus.createWriterToModify(fileName, { modifiedFilePath: outputFileName })\n    this.pdfReader = this.pdfWriter.getModifiedFileParser()\n\n    let font = null\n    let fontDims = null\n\n    if (fontFileName) {\n      font = this.pdfWriter.getFontForFile(fontFileName)\n      fontDims = font.calculateTextDimensions('X',14)\n    }\n\n    const catalogDict = this.pdfReader\n      .queryDictionaryObject(this.pdfReader.getTrailer(), 'Root').toPDFDictionary()\n\n    if (catalogDict.exists('AcroForm')) {\n      this.log.warning('PDF still has an AcroForm')\n    }\n\n    const numPages = this.pdfReader.getPagesCount()\n\n    for (let i = 0; i < numPages; i++) {\n      const page = this.pdfReader.parsePage(i)\n      const pageModifier = new hummus.PDFPageModifier(this.pdfWriter, 0)\n      let pageContext = pageModifier.startContext().getContext()\n      const fields = data.fields.filter(f => (f.page === i))\n\n      for (let field of fields) {\n        const x = field.rect[0]\n        const y = field.rect[1]\n        const w = field.rect[2] - x\n        const h = field.rect[3] - y\n        const rise = h / 4.0\n        const halfH = h / 2\n\n        switch (field.type) {\n          case 'highlight':\n            pageContext\n              .q()\n              .rg(1, 1, 0.6)\n              .re(x, y, w, h)\n              .f()\n              .Q()\n            break\n          case 'plaintext':\n            if (!font) {\n              this.log.error('Font file must be specified for plaintext fields')\n              return -1\n            }\n            pageContext\n              .q()\n              .BT()\n              .g(0)\n              .Tm(1, 0, 0, 1, x, y + rise)\n              .Tf(font, 14)\n              .Tj(field.value)\n              .ET()\n              .Q()\n            break\n          case 'qrcode':\n            const pngFileName = temp.path('.png')\n\n            await QRCode.toFile(pngFileName, field.value)\n\n            pageModifier.endContext()\n            let imageXObject = this.pdfWriter.createFormXObjectFromPNG(pngFileName)\n            pageContext = pageModifier.startContext().getContext()\n\n            pageContext.q()\n               .cm(1, 0, 0, 1, x, y)\n               .doXObject(imageXObject)\n               .Q()\n\n            fs.unlinkSync(pngFileName)\n            break\n          case 'checkbox':\n            pageContext\n              .q()\n              .G(0)\n              .w(2.5)\n\n            if (checkboxBorders) {\n              pageContext\n                .J(2)\n                .re(x, y, w, h)\n                .S()\n            }\n\n            if (!!field.value) {\n              const dx = w / 5.0\n              const dy = h / 5.0\n\n              pageContext\n                .J(1)\n                .m(x + dx, y + dy)\n                .l(x + w - dx, y + h - dy)\n                .S()\n                .m(x + dx, y + h - dy)\n                .l(x + w - dy, y + dy)\n                .S()\n            }\n\n            pageContext.Q()\n            break\n          case 'signhere':\n            if (!font) {\n              this.log.error('Font file must be specified for signhere fields')\n              return -1\n            }\n\n            const q = Math.PI / 4.0\n\n            pageModifier.endContext()\n\n            let gsID = this.createOpacityExtGState(0.5)\n            let formXObject = this.pdfWriter.createFormXObject(0, 0, w, h)\n            let gsName = formXObject.getResourcesDictionary().addExtGStateMapping(gsID)\n\n            formXObject.getContentContext()\n              .q()\n              .gs(gsName)\n              .w(1.0)\n              .G(0)\n              .rg(1, 0.6, 1)\n              .m(0, halfH)\n              .l(halfH, 0)\n              .l(w, 0)\n              .l(w, h)\n              .l(halfH, h)\n              .h()\n              .B()\n              .BT()\n              .g(0)\n              .Tm(1, 0, 0, 1, halfH, halfH - fontDims.height / 2.0)\n              .Tf(font, 12)\n              .Tj(`Sign Here ${field.value}`)\n              .ET()\n              .Q()\n            this.pdfWriter.endFormXObject(formXObject)\n\n            pageContext = pageModifier.startContext().getContext()\n\n            pageContext\n              .q()\n              .cm(1, 0, 0, 1, x, y + halfH)\n              .cm(Math.cos(q), Math.sin(q), -Math.sin(q), Math.cos(q), 0, 0)\n              .cm(1, 0, 0, 1, 0, -halfH)\n              // NOTE: The coordinate space of the XObjects is the same as the page!\n              .doXObject(formXObject)\n              .Q()\n            break\n          default:\n            this.log.warning(`Unknown field type ${field.type}`)\n            break\n        }\n      }\n\n      pageModifier.endContext().writePage()\n    }\n\n    this.pdfWriter.end()\n  }\n\n  createOpacityExtGState(opacity) {\n    const context = this.pdfWriter.getObjectsContext()\n    const id = context.startNewIndirectObject()\n    const dict = context.startDictionary()\n\n    dict\n      .writeKey('type')\n      .writeNameValue('ExtGState')\n      .writeKey('ca')\n    context\n      .writeNumber(opacity)\n      .endLine()\n    dict.writeKey('CA')\n    context\n      .writeNumber(opacity)\n      .endLine()\n      .endDictionary(dict)\n\n    return id\n  }\n\n  async watermark() {\n    const fileName = this.args._[0]\n\n    if (!fileName) {\n      this.log.error('Must specify a PDF from which to remove the AcroForm')\n      return -1\n    }\n\n    if (!fs.existsSync(fileName)) {\n      this.log.error(`File '${fileName}' does not exist`)\n      return -1\n    }\n\n    const watermarkFileName = this.args['watermark-file']\n\n    if (!watermarkFileName) {\n      this.log.error('No watermark file specified')\n      return -1\n    }\n\n    if (!fs.existsSync(watermarkFileName)) {\n      this.log.error(`File '${watermarkFileName}' does not exist`)\n      return -1\n    }\n\n    const outputFileName = this.args['output-file']\n\n    if (!outputFileName) {\n      this.log.error('No output file specified')\n      return -1\n    }\n\n    this.pdfWriter = hummus.createWriter(outputFileName)\n    this.pdfReader = hummus.createReader(fileName)\n    const copyingContext = this.pdfWriter.createPDFCopyingContext(this.pdfReader)\n\n    // First, read in the watermark PDF and create a\n    const watermarkInfo = this.getPDFPageInfo(watermarkFileName, 0)\n\n    const formIDs = this.pdfWriter.createFormXObjectsFromPDF(\n      watermarkFileName, hummus.ePDFPageBoxMediaBox)\n\n    // Next, iterate through the pages from the source document\n    const numPages = this.pdfReader.getPagesCount()\n\n    for (let i = 0; i < numPages; i++) {\n      const page = this.pdfReader.parsePage(i)\n      const pageMediaBox = page.getMediaBox()\n      const newPage = this.pdfWriter.createPage(...pageMediaBox)\n\n      // Merge the page; this will also remove annotations.\n      copyingContext.mergePDFPageToPage(newPage, i)\n\n      const pageContext = this.pdfWriter.startPageContentContext(newPage)\n\n      pageContext\n        .q()\n        .cm(1, 0, 0, 1, (pageMediaBox[2] - watermarkInfo.mediaBox[2]) / 2, (pageMediaBox[3] - watermarkInfo.mediaBox[3]) / 2)\n        .doXObject(newPage.getResourcesDictionary().addFormXObjectMapping(formIDs[0]))\n        .Q()\n\n      this.pdfWriter.writePage(newPage)\n    }\n\n    this.pdfWriter.end()\n    return 0\n  }\n\n  getPDFPageInfo(fileName, pageNum) {\n    const pdfReader = hummus.createReader(fileName)\n    const page = pdfReader.parsePage(pageNum)\n\n    return {\n      mediaBox: page.getMediaBox()\n    }\n  }\n\n  parseKids(fieldDictionary, inheritedProperties, baseFieldName) {\n    let localEnv = {}\n\n    if (fieldDictionary.exists('FT')) {\n      localEnv['FT'] = fieldDictionary.queryObject('FT').toString()\n    }\n    if (fieldDictionary.exists('Ff')) {\n      localEnv['Ff'] = fieldDictionary.queryObject('Ff').toNumber()\n    }\n    if (fieldDictionary.exists('DA')) {\n      localEnv['DA'] = toText(fieldDictionary.queryObject('DA'))\n    }\n    if (fieldDictionary.exists('Opt')) {\n      localEnv['Opt'] = fieldDictionary.queryObject('Opt').toPDFArray()\n    }\n\n    let result = this.parseFieldsArray(\n      this.pdfReader.queryDictionaryObject(fieldDictionary, 'Kids').toPDFArray(),\n      {...inheritedProperties, ...localEnv},\n      baseFieldName)\n\n    return result\n  }\n\n  parseOnOffValue(fieldDictionary) {\n    if (fieldDictionary.exists('V')) {\n      let value = fieldDictionary.queryObject('V').toString()\n      if (value === 'Off' || value === '') {\n        return false\n      } else {\n        return true\n      }\n    }\n    else {\n      return null\n    }\n  }\n\n  parseRadioButtonValue(fieldDictionary) {\n    if (fieldDictionary.exists('V')) {\n      let value = fieldDictionary.queryObject('V').toString()\n\n      if (value === 'Off' || value === '') {\n        return null\n      } else {\n        // using true cause sometimes these are actually checkboxes, and there's no underlying kids\n        let result = true\n        // for radio button this would be an appearance name of a radio button that's turned on. we wanna look for it\n        if (fieldDictionary.exists('Kids')) {\n          let  kidsArray = this.pdfReader.queryDictionaryObject(fieldDictionary,'Kids').toPDFArray()\n\n          for (let i=0;i<kidsArray.getLength();++i) {\n            let widgetDictionary = this.pdfReader.queryArrayObject(kidsArray,i).toPDFDictionary()\n            // use the dictionary Ap/N dictionary for looking up the appearance stream name\n            let apDictionary = this.pdfReader.queryDictionaryObject(widgetDictionary,'AP').toPDFDictionary()\n            let nAppearances = this.pdfReader.queryDictionaryObject(apDictionary,'N').toPDFDictionary()\n\n            if (nAppearances.exists(value)) {\n              // Found!\n              result = i; // save the selected index as value\n              break\n            }\n          }\n        }\n\n        return result\n      }\n    } else {\n      return null\n    }\n  }\n\n  parseTextFieldValue(fieldDictionary, fieldName) {\n    // grab field value, may be either a text string or a text stream\n    if (!fieldDictionary.exists(fieldName)) {\n      return null\n    }\n\n    let valueField = this.pdfReader.queryDictionaryObject(fieldDictionary,fieldName)\n\n    if (valueField.getType() == hummus.ePDFObjectLiteralString) {\n      return toText(valueField)\n    } else if (valueField.getType() == hummus.ePDFObjectStream) {\n      let bytes = []\n      let readStream = pdfReader.startReadingFromStream(valueField.toPDFStream())\n\n      while (readStream.notEnded())\n      {\n        const readData = readStream.read(1)\n        // do something with the data\n        bytes.push(readData[0])\n      }\n      return new PDFTextString(bytes).toString()\n    } else {\n      return null\n    }\n  }\n\n  parseChoiceValue(fieldDictionary) {\n    if (fieldDictionary.exists('V')) {\n      let valueField = this.pdfReader.queryDictionaryObject(fieldDictionary,\"V\")\n\n      if (valueField.getType() == hummus.ePDFObjectLiteralString ||\n        valueField.getType() == hummus.ePDFObjectHexString) {\n        // text string. read into value\n        return toText(valueField)\n      } else if (valueField.getType == hummus.ePDFObjectArray) {\n        let arrayOfStrings = valueField.toPDFArray().toJSArray()\n        return arrayOfStrings.map(toText)\n      } else {\n        return undefined\n      }\n    } else {\n      return undefined\n    }\n  }\n\n  parseFieldsValueData(result, fieldDictionary, flags, inheritedProperties) {\n    const localFieldType = fieldDictionary.exists('FT') ? fieldDictionary.queryObject('FT').toString() : undefined\n    const fieldType = localFieldType || inheritedProperties['FT']\n\n    if (!fieldType) {\n      return null; // k. must be a widget\n    }\n\n    switch (fieldType) {\n      case 'Btn': {\n        if ((flags>>16) & 1) {\n          // push button\n          result['type'] = 'button'\n          // no value\n        } else if ((flags>>15) & 1) {\n          // radio button\n          result['type'] = 'radio'\n          result['value'] = this.parseRadioButtonValue(fieldDictionary)\n        } else {\n          // checkbox\n          result['type'] = 'checkbox'\n          result['value'] = this.parseOnOffValue(fieldDictionary)\n        }\n        break\n      }\n      case 'Tx': {\n        // result['isFileSelect'] = !!(flags>>20 & 1)\n        if ((flags>>25) & 1) {\n          result['type'] = 'richtext'\n          // rich text, value in 'RV'\n          result['value'] = this.parseTextFieldValue(fieldDictionary,'RV')\n          result['plainValue'] = this.parseTextFieldValue(fieldDictionary,'V')\n        } else {\n          result['type'] = 'plaintext'\n          result['value'] = this.parseTextFieldValue(fieldDictionary,'V')\n        }\n\n        break\n      }\n      case 'Ch': {\n        result['type'] = 'choice'\n        result['value'] = this.parseChoiceValue(fieldDictionary)\n        break\n      }\n      case 'Sig': {\n        result['type'] = 'signature'\n        break\n      }\n    }\n  }\n\n  parseField(fieldDictionary, inheritedProperties, baseFieldName) {\n    let fieldNameT = fieldDictionary.exists('T') ? toText(fieldDictionary.queryObject('T')) : undefined\n    let fieldNameTU = fieldDictionary.exists('TU') ? toText(fieldDictionary.queryObject('TU')) : undefined\n    let fieldNameTM = fieldDictionary.exists('TM') ? toText(fieldDictionary.queryObject('TM')) : undefined\n    let fieldFlags = fieldDictionary.exists('Ff') ? fieldDictionary.queryObject('Ff').toNumber() : undefined\n    let fieldRect = fieldDictionary.exists('Rect') ? fieldDictionary.queryObject('Rect').toPDFArray().toJSArray() : undefined\n    let fieldP = fieldDictionary.exists('P') ? fieldDictionary.queryObject('P').toPDFIndirectObjectReference().getObjectID() : undefined\n\n    fieldFlags = (fieldFlags === undefined ? inheritedProperties['Ff'] : fieldFlags)\n    fieldFlags = fieldFlags || 0\n\n    if (fieldRect) {\n      fieldRect = fieldRect.map(r => r.value)\n    }\n\n    // Assume that if there's no T and no Kids, this is a widget annotation which is not a field\n    if (fieldNameT === undefined &&\n      !fieldDictionary.exists('Kids') &&\n      fieldDictionary.exists('Subtype') &&\n      fieldDictionary.queryObject('Subtype').toString() == 'Widget') {\n      return null\n    }\n\n    let result = {\n      name: fieldNameT,\n      fullName: fieldNameT === undefined ? undefined : (baseFieldName + fieldNameT),\n      //alternateName: fieldNameTU,\n      //mappingName: fieldNameTM,\n      //isNoExport: !!((fieldFlags>>2) & 1),\n      rect: fieldRect,\n      page: this.pageMap[fieldP]\n    }\n\n    if (fieldDictionary.exists('Kids')) {\n      let kids = this.parseKids(fieldDictionary, inheritedProperties, baseFieldName + fieldNameT + '.')\n\n      if (kids) {\n        // that would be a non terminal node, otherwise all kids are annotations an null would be returned\n        result['kids'] = kids\n      } else {\n        // a terminal node, so kids array returned empty\n        this.parseFieldsValueData(result, fieldDictionary, fieldFlags, inheritedProperties)\n      }\n    } else {\n      // read fields value data\n      this.parseFieldsValueData(result, fieldDictionary, fieldFlags, inheritedProperties)\n    }\n\n    return result\n  }\n\n  parseFieldsArray(fieldsArray, inheritedProperties, baseFieldName) {\n    let result = []\n\n    for (let i=0; i < fieldsArray.getLength(); ++i) {\n      let fieldResult = this.parseField(\n        this.pdfReader.queryArrayObject(fieldsArray,i).toPDFDictionary(),\n        inheritedProperties, baseFieldName)\n\n      if (fieldResult) {\n        result.push(fieldResult)\n      }\n    }\n\n    return result\n  }\n}\n"]}