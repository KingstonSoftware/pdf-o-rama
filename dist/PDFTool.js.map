{"version":3,"sources":["../src/PDFTool.js"],"names":["fs","readFileAsync","util","promisify","readFile","writeFileAsync","writeFile","toText","item","getType","hummus","ePDFObjectLiteralString","toPDFLiteralString","ePDFObjectHexString","toPDFHexString","value","PDFTool","autobind","constructor","toolName","log","run","argv","options","string","boolean","alias","o","w","d","f","c","args","command","_","length","toLowerCase","shift","version","info","fullVersion","help","concat","fields","strip","watermark","fill","error","fileNames","fileName","existsSync","outputFile","pdfWriter","createWriter","appendPDFPagesFromPDF","end","dataFileName","outputFileName","pdfReader","createReader","catalogDict","queryDictionaryObject","getTrailer","toPDFDictionary","exists","acroformDict","fieldsArray","toPDFArray","numPages","getPagesCount","pageMap","i","getPageObjectID","fieldData","parseFieldsArray","stripAcroFormAndAnnotations","buf","md5","buffer","JSON","stringify","undefined","startModifiedDictionaryExcluding","originalDict","excludedKeys","originalDictJS","toJSObject","newDict","objectsContext","startDictionary","Object","getOwnPropertyNames","forEach","element","includes","writeKey","copyingContext","copyDirectObjectAsIs","createPDFCopyingContext","page","parsePage","pageMediaBox","getMediaBox","newPage","createPage","mergePDFPageToPage","writePage","jsonFileName","fontFileName","checkboxBorders","data","JSON5","parse","encoding","e","message","createWriterToModify","modifiedFilePath","getModifiedFileParser","font","fontDims","getFontForFile","calculateTextDimensions","warning","pageModifier","PDFPageModifier","pageContext","startContext","getContext","filter","field","x","rect","y","h","rise","halfH","type","q","rg","re","Q","BT","g","Tm","Tf","Tj","ET","pngFileName","tmp","tmpName","postfix","QRCode","toFile","endContext","imageXObject","createFormXObjectFromPNG","cm","doXObject","unlinkSync","G","J","S","dx","dy","m","l","Math","PI","gsID","createOpacityExtGState","formXObject","createFormXObject","gsName","getResourcesDictionary","addExtGStateMapping","getContentContext","gs","B","height","endFormXObject","cos","sin","opacity","context","getObjectsContext","id","startNewIndirectObject","dict","writeNameValue","writeNumber","endLine","endDictionary","watermarkFileName","watermarkInfo","getPDFPageInfo","formIDs","createFormXObjectsFromPDF","ePDFPageBoxMediaBox","startPageContentContext","mediaBox","addFormXObjectMapping","pageNum","parseKids","fieldDictionary","inheritedProperties","baseFieldName","localEnv","queryObject","toString","toNumber","result","parseOnOffValue","parseRadioButtonValue","kidsArray","getLength","widgetDictionary","queryArrayObject","apDictionary","nAppearances","parseTextFieldValue","fieldName","valueField","ePDFObjectStream","bytes","readStream","startReadingFromStream","toPDFStream","notEnded","readData","read","push","PDFTextString","parseChoiceValue","ePDFObjectArray","arrayOfStrings","toJSArray","map","parseFieldsValueData","flags","localFieldType","fieldType","parseField","fieldNameT","fieldNameTU","fieldNameTM","fieldFlags","fieldRect","fieldP","toPDFIndirectObjectReference","getObjectID","r","name","fullName","kids","fieldResult"],"mappings":"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","sourcesContent":["import parseArgs from \"minimist\"\nimport { fullVersion } from \"./version\"\nimport fs from \"fs\"\nimport tmp from \"tmp-promise\"\nimport hummus from \"hummus\"\nimport util from \"util\"\nimport JSON5 from \"json5\"\nimport QRCode from \"qrcode\"\nimport md5 from \"md5\"\nimport autobind from \"autobind-decorator\"\n\nfs.readFileAsync = util.promisify(fs.readFile)\nfs.writeFileAsync = util.promisify(fs.writeFile)\n\nfunction toText(item) {\n  if (item.getType() === hummus.ePDFObjectLiteralString) {\n    return item.toPDFLiteralString().toText()\n  } else if (item.getType() === hummus.ePDFObjectHexString) {\n    return item.toPDFHexString().toText()\n  } else {\n    return item.value\n  }\n}\n\n@autobind\nexport class PDFTool {\n  constructor(toolName, log) {\n    this.toolName = toolName\n    this.log = log\n  }\n\n  async run(argv) {\n    const options = {\n      string: [\"output-file\", \"watermark-file\", \"data-file\", \"font-file\"],\n      boolean: [\"help\", \"version\", \"checkbox-borders\"],\n      alias: {\n        o: \"output-file\",\n        w: \"watermark-file\",\n        d: \"data-file\",\n        f: \"font-file\",\n        c: \"checkbox-borders\",\n      },\n    }\n\n    this.args = parseArgs(argv, options)\n\n    let command = \"help\"\n\n    if (this.args._.length > 0) {\n      command = this.args._[0].toLowerCase()\n      this.args._.shift()\n    }\n\n    if (this.args.version) {\n      this.log.info(`${fullVersion}`)\n      return 0\n    }\n\n    switch (command) {\n      case \"concat\":\n        if (this.args.help) {\n          this.log.info(`\nUsage: ${this.toolName} concat <pdf1> <pdf2> [<pdf3> ...] [options]\n\nOptions:\n  --output-file, -o  Output PDF file\n\nNotes:\n  File will be concatenated in the order in which they are given.\n`)\n          return 0\n        }\n        return await this.concat()\n      case \"fields\":\n        if (this.args.help) {\n          this.log.info(`\nUsage: ${this.toolName} fields <pdf>\n\nOptions:\n--data-file, -d         Output JSON file\n--output-file, -o       Optional output PDF stripped of AcroForm and annotations.\n                        Adds 'md5' field to the output JSON.\n\nNotes:\nOutputs a JSON file containing information for all the AcroForm fields in the document.\nIf an output file is specified a stripped PDF will be generated (see 'strip' command)\nand an MD5 hash for the file will be included in the data file.\n`)\n          return 0\n        }\n        return await this.fields()\n      case \"strip\":\n        if (this.args.help) {\n          this.log.info(`\nUsage: ${this.toolName} strip <pdf> [options]\n\nOptions:\n  --output-file, -o    Output PDF file\n\nNotes:\nStrips any AcroForm and page annotations from the document.\n`)\n          return 0\n        }\n        return await this.strip()\n      case \"watermark\":\n        if (this.args.help) {\n          this.log.info(`\nUsage: ${this.toolName} watermark <pdf> [options]\n\nOptions:\n  --watermark-file , -w   Watermarked PDF document\n  --output-file, -o       Output PDF file\n\nNotes:\nAdds a watermark images to the existing content of each page of the given PDF.\n`)\n          return 0\n        }\n        return await this.watermark()\n      case \"fill\":\n        if (this.args.help) {\n          this.log.info(`\nUsage: ${this.toolName} fill <pdf> [options]\n\nOptions:\n--output-file, -o       Output PDF file\n--data-file, -d         Input JSON/JSON5 data file\n--font-file, -f         Input font file name to use for text fields\n--checkbox-borders, -c  Put borders around checkboxes\n\nNotes:\nInserts 'form' data into the pages of the PDF.\n`)\n          return 0\n        }\n        return await this.fill()\n      case \"help\":\n        this.log.info(`\nUsage: ${this.toolName} <cmd> [options]\n\nCommands:\nhelp              Shows this help\nconcat            Concatenate two or more PDFs\nfields            Extract the field data from a PDF and optionally\n                  create a PDF stripped of its AcroForm and annotations.\n                  Generates an MD5 hash for the stripped PDF.\nstrip             Strip an AcroForm from a PDF\nwatermark         Add a watermark to every page of a PDF. Strips\n                  AcroForms and annotations in the resulting file.\nfill              Fill-in \"fields\" defined in a JSON5 file with data,\n                  checking against existing MD5 has for changes.\n\nGlobal Options:\n  --help          Shows this help.\n  --version       Shows the tool version.\n`)\n        return 0\n      default:\n        this.log.error(\n          `Unknown command ${command}.  Use --help to see available commands`\n        )\n        return -1\n    }\n\n    return 0\n  }\n\n  async concat() {\n    const fileNames = this.args._\n\n    if (fileNames.length < 2) {\n      this.log.error(\"Must specify at least two PDF files to concatenate\")\n      return -1\n    }\n\n    for (let fileName of fileNames) {\n      if (!fs.existsSync(fileName)) {\n        this.log.error(`File '${fileName}' does not exist`)\n        return -1\n      }\n    }\n\n    const outputFile = this.args[\"output-file\"]\n\n    if (!outputFile) {\n      this.log.error(\"No output file specified\")\n      return -1\n    }\n\n    const pdfWriter = hummus.createWriter(outputFile)\n\n    for (let fileName of fileNames) {\n      pdfWriter.appendPDFPagesFromPDF(fileName)\n    }\n\n    pdfWriter.end()\n  }\n\n  async fields() {\n    const fileName = this.args._[0]\n\n    if (!fileName) {\n      this.log.error(\"Must specify a PDF from which to extract information\")\n      return -1\n    }\n\n    if (!fs.existsSync(fileName)) {\n      this.log.error(`File '${fileName}' does not exist`)\n      return -1\n    }\n\n    const dataFileName = this.args[\"data-file\"]\n\n    if (!dataFileName) {\n      this.log.error(`No output data file specified`)\n      return -1\n    }\n\n    const outputFileName = this.args[\"output-file\"]\n\n    this.pdfReader = hummus.createReader(fileName)\n\n    const catalogDict = this.pdfReader\n      .queryDictionaryObject(this.pdfReader.getTrailer(), \"Root\")\n      .toPDFDictionary()\n\n    if (!catalogDict.exists(\"AcroForm\")) {\n      this.log.error(\"PDF does not have an AcroForm\")\n      return -1\n    }\n\n    this.acroformDict = this.pdfReader\n      .queryDictionaryObject(catalogDict, \"AcroForm\")\n      .toPDFDictionary()\n\n    let fieldsArray = this.acroformDict.exists(\"Fields\")\n      ? this.pdfReader\n          .queryDictionaryObject(this.acroformDict, \"Fields\")\n          .toPDFArray()\n      : null\n\n    // Page map is used to get page number from page object ID\n    const numPages = this.pdfReader.getPagesCount()\n\n    this.pageMap = {}\n    for (let i = 0; i < numPages; i++) {\n      this.pageMap[this.pdfReader.getPageObjectID(i)] = i\n    }\n\n    let fieldData = {}\n\n    fieldData.numPages = numPages\n    fieldData.fields = this.parseFieldsArray(fieldsArray, {}, \"\")\n\n    if (outputFileName) {\n      await this.stripAcroFormAndAnnotations(fileName, outputFileName)\n      const buf = await fs.readFileAsync(outputFileName)\n      fieldData.md5 = md5(buf.buffer)\n    }\n\n    await fs.writeFileAsync(\n      dataFileName,\n      JSON.stringify(fieldData, undefined, \"  \")\n    )\n\n    return 0\n  }\n\n  startModifiedDictionaryExcluding(originalDict, excludedKeys) {\n    let originalDictJS = originalDict.toJSObject()\n    let newDict = this.objectsContext.startDictionary()\n\n    Object.getOwnPropertyNames(originalDictJS).forEach((element) => {\n      if (!excludedKeys.includes(element)) {\n        newDict.writeKey(element)\n        this.copyingContext.copyDirectObjectAsIs(originalDictJS[element])\n      }\n    })\n\n    return newDict\n  }\n\n  async strip() {\n    const fileName = this.args._[0]\n\n    if (!fileName) {\n      this.log.error(\"Must specify a PDF from which to remove the AcroForm\")\n      return -1\n    }\n\n    if (!fs.existsSync(fileName)) {\n      this.log.error(`File '${fileName}' does not exist`)\n      return -1\n    }\n\n    const outputFileName = this.args[\"output-file\"]\n\n    if (!outputFileName) {\n      this.log.error(`No output file specified`)\n      return -1\n    }\n\n    await this.stripAcroFormAndAnnotations(fileName, outputFileName)\n\n    return 0\n  }\n\n  async stripAcroFormAndAnnotations(fileName, outputFileName) {\n    // This strips the AcroForm and page annotations as a side-effect\n    // merging them into a new page.\n    const pdfWriter = hummus.createWriter(outputFileName)\n    const pdfReader = hummus.createReader(fileName)\n    const copyingContext = pdfWriter.createPDFCopyingContext(pdfReader)\n\n    // Next, iterate through the pages from the source document\n    const numPages = pdfReader.getPagesCount()\n\n    for (let i = 0; i < numPages; i++) {\n      const page = pdfReader.parsePage(i)\n      const pageMediaBox = page.getMediaBox()\n      const newPage = pdfWriter.createPage(...pageMediaBox)\n\n      // Merge the page; this will also remove annotations.\n      copyingContext.mergePDFPageToPage(newPage, i)\n      pdfWriter.writePage(newPage)\n    }\n\n    pdfWriter.end()\n  }\n\n  async fill() {\n    const fileName = this.args._[0]\n\n    if (!fileName) {\n      this.log.error(\"Must specify an input PDF file\")\n      return -1\n    }\n\n    if (!fs.existsSync(fileName)) {\n      this.log.error(`File '${fileName}' does not exist`)\n      return -1\n    }\n\n    const outputFileName = this.args[\"output-file\"]\n\n    if (!outputFileName) {\n      this.log.error(\"No output file specified\")\n      return -1\n    }\n\n    const jsonFileName = this.args[\"data-file\"]\n\n    if (!jsonFileName) {\n      this.log.error(\"Must specify a data file\")\n      return -1\n    }\n\n    if (!fs.existsSync(jsonFileName)) {\n      this.log.error(`File '${jsonFileName}' does not exist`)\n      return -1\n    }\n\n    const fontFileName = this.args[\"font-file\"]\n    const checkboxBorders = !!this.args[\"checkbox-borders\"]\n\n    let data = null\n\n    try {\n      data = await JSON5.parse(\n        await fs.readFileAsync(jsonFileName, { encoding: \"utf8\" })\n      )\n    } catch (e) {\n      this.log.error(`Unable to read data file '${jsonFileName}'. ${e.message}`)\n      return -1\n    }\n\n    if (data.md5) {\n      const buf = await fs.readFileAsync(fileName)\n\n      if (md5(buf.buffer) !== data.md5) {\n        this.log.error(\n          `MD5 for ${fileName} does not match the one in the data file`\n        )\n        return -1\n      }\n    }\n\n    this.pdfWriter = hummus.createWriterToModify(fileName, {\n      modifiedFilePath: outputFileName,\n    })\n    this.pdfReader = this.pdfWriter.getModifiedFileParser()\n\n    let font = null\n    let fontDims = null\n\n    if (fontFileName) {\n      font = this.pdfWriter.getFontForFile(fontFileName)\n      fontDims = font.calculateTextDimensions(\"X\", 14)\n    }\n\n    const catalogDict = this.pdfReader\n      .queryDictionaryObject(this.pdfReader.getTrailer(), \"Root\")\n      .toPDFDictionary()\n\n    if (catalogDict.exists(\"AcroForm\")) {\n      this.log.warning(\"PDF still has an AcroForm\")\n    }\n\n    const numPages = this.pdfReader.getPagesCount()\n\n    for (let i = 0; i < numPages; i++) {\n      const page = this.pdfReader.parsePage(i)\n      const pageModifier = new hummus.PDFPageModifier(this.pdfWriter, 0)\n      let pageContext = pageModifier.startContext().getContext()\n      const fields = data.fields.filter((f) => f.page === i)\n\n      for (let field of fields) {\n        const x = field.rect[0]\n        const y = field.rect[1]\n        const w = field.rect[2] - x\n        const h = field.rect[3] - y\n        const rise = h / 4.0\n        const halfH = h / 2\n\n        switch (field.type) {\n          case \"highlight\":\n            pageContext\n              .q()\n              .rg(1, 1, 0.6)\n              .re(x, y, w, h)\n              .f()\n              .Q()\n            break\n          case \"plaintext\":\n            if (!font) {\n              this.log.error(\"Font file must be specified for plaintext fields\")\n              return -1\n            }\n            pageContext\n              .q()\n              .BT()\n              .g(0)\n              .Tm(1, 0, 0, 1, x, y + rise)\n              .Tf(font, 14)\n              .Tj(field.value)\n              .ET()\n              .Q()\n            break\n          case \"qrcode\":\n            const pngFileName = await tmp.tmpName({ postfix: \".png\" })\n\n            await QRCode.toFile(pngFileName, field.value)\n\n            pageModifier.endContext()\n            let imageXObject = this.pdfWriter.createFormXObjectFromPNG(\n              pngFileName\n            )\n            pageContext = pageModifier.startContext().getContext()\n\n            pageContext\n              .q()\n              .cm(1, 0, 0, 1, x, y)\n              .doXObject(imageXObject)\n              .Q()\n\n            fs.unlinkSync(pngFileName)\n            break\n          case \"checkbox\":\n            pageContext\n              .q()\n              .G(0)\n              .w(2.5)\n\n            if (checkboxBorders) {\n              pageContext\n                .J(2)\n                .re(x, y, w, h)\n                .S()\n            }\n\n            if (!!field.value) {\n              const dx = w / 5.0\n              const dy = h / 5.0\n\n              pageContext\n                .J(1)\n                .m(x + dx, y + dy)\n                .l(x + w - dx, y + h - dy)\n                .S()\n                .m(x + dx, y + h - dy)\n                .l(x + w - dy, y + dy)\n                .S()\n            }\n\n            pageContext.Q()\n            break\n          case \"signhere\":\n            if (!font) {\n              this.log.error(\"Font file must be specified for signhere fields\")\n              return -1\n            }\n\n            const q = Math.PI / 4.0\n\n            pageModifier.endContext()\n\n            let gsID = this.createOpacityExtGState(0.5)\n            let formXObject = this.pdfWriter.createFormXObject(0, 0, w, h)\n            let gsName = formXObject\n              .getResourcesDictionary()\n              .addExtGStateMapping(gsID)\n\n            formXObject\n              .getContentContext()\n              .q()\n              .gs(gsName)\n              .w(1.0)\n              .G(0)\n              .rg(1, 0.6, 1)\n              .m(0, halfH)\n              .l(halfH, 0)\n              .l(w, 0)\n              .l(w, h)\n              .l(halfH, h)\n              .h()\n              .B()\n              .BT()\n              .g(0)\n              .Tm(1, 0, 0, 1, halfH, halfH - fontDims.height / 2.0)\n              .Tf(font, 12)\n              .Tj(`Sign Here ${field.value}`)\n              .ET()\n              .Q()\n            this.pdfWriter.endFormXObject(formXObject)\n\n            pageContext = pageModifier.startContext().getContext()\n\n            pageContext\n              .q()\n              .cm(1, 0, 0, 1, x, y + halfH)\n              .cm(Math.cos(q), Math.sin(q), -Math.sin(q), Math.cos(q), 0, 0)\n              .cm(1, 0, 0, 1, 0, -halfH)\n              // NOTE: The coordinate space of the XObjects is the same as the page!\n              .doXObject(formXObject)\n              .Q()\n            break\n          default:\n            this.log.warning(`Unknown field type ${field.type}`)\n            break\n        }\n      }\n\n      pageModifier.endContext().writePage()\n    }\n\n    this.pdfWriter.end()\n  }\n\n  createOpacityExtGState(opacity) {\n    const context = this.pdfWriter.getObjectsContext()\n    const id = context.startNewIndirectObject()\n    const dict = context.startDictionary()\n\n    dict\n      .writeKey(\"type\")\n      .writeNameValue(\"ExtGState\")\n      .writeKey(\"ca\")\n    context.writeNumber(opacity).endLine()\n    dict.writeKey(\"CA\")\n    context\n      .writeNumber(opacity)\n      .endLine()\n      .endDictionary(dict)\n\n    return id\n  }\n\n  async watermark() {\n    const fileName = this.args._[0]\n\n    if (!fileName) {\n      this.log.error(\"Must specify a PDF from which to remove the AcroForm\")\n      return -1\n    }\n\n    if (!fs.existsSync(fileName)) {\n      this.log.error(`File '${fileName}' does not exist`)\n      return -1\n    }\n\n    const watermarkFileName = this.args[\"watermark-file\"]\n\n    if (!watermarkFileName) {\n      this.log.error(\"No watermark file specified\")\n      return -1\n    }\n\n    if (!fs.existsSync(watermarkFileName)) {\n      this.log.error(`File '${watermarkFileName}' does not exist`)\n      return -1\n    }\n\n    const outputFileName = this.args[\"output-file\"]\n\n    if (!outputFileName) {\n      this.log.error(\"No output file specified\")\n      return -1\n    }\n\n    this.pdfWriter = hummus.createWriter(outputFileName)\n    this.pdfReader = hummus.createReader(fileName)\n    const copyingContext = this.pdfWriter.createPDFCopyingContext(\n      this.pdfReader\n    )\n\n    // First, read in the watermark PDF and create a\n    const watermarkInfo = this.getPDFPageInfo(watermarkFileName, 0)\n\n    const formIDs = this.pdfWriter.createFormXObjectsFromPDF(\n      watermarkFileName,\n      hummus.ePDFPageBoxMediaBox\n    )\n\n    // Next, iterate through the pages from the source document\n    const numPages = this.pdfReader.getPagesCount()\n\n    for (let i = 0; i < numPages; i++) {\n      const page = this.pdfReader.parsePage(i)\n      const pageMediaBox = page.getMediaBox()\n      const newPage = this.pdfWriter.createPage(...pageMediaBox)\n\n      // Merge the page; this will also remove annotations.\n      copyingContext.mergePDFPageToPage(newPage, i)\n\n      const pageContext = this.pdfWriter.startPageContentContext(newPage)\n\n      pageContext\n        .q()\n        .cm(\n          1,\n          0,\n          0,\n          1,\n          (pageMediaBox[2] - watermarkInfo.mediaBox[2]) / 2,\n          (pageMediaBox[3] - watermarkInfo.mediaBox[3]) / 2\n        )\n        .doXObject(\n          newPage.getResourcesDictionary().addFormXObjectMapping(formIDs[0])\n        )\n        .Q()\n\n      this.pdfWriter.writePage(newPage)\n    }\n\n    this.pdfWriter.end()\n    return 0\n  }\n\n  getPDFPageInfo(fileName, pageNum) {\n    const pdfReader = hummus.createReader(fileName)\n    const page = pdfReader.parsePage(pageNum)\n\n    return {\n      mediaBox: page.getMediaBox(),\n    }\n  }\n\n  parseKids(fieldDictionary, inheritedProperties, baseFieldName) {\n    let localEnv = {}\n\n    if (fieldDictionary.exists(\"FT\")) {\n      localEnv[\"FT\"] = fieldDictionary.queryObject(\"FT\").toString()\n    }\n    if (fieldDictionary.exists(\"Ff\")) {\n      localEnv[\"Ff\"] = fieldDictionary.queryObject(\"Ff\").toNumber()\n    }\n    if (fieldDictionary.exists(\"DA\")) {\n      localEnv[\"DA\"] = toText(fieldDictionary.queryObject(\"DA\"))\n    }\n    if (fieldDictionary.exists(\"Opt\")) {\n      localEnv[\"Opt\"] = fieldDictionary.queryObject(\"Opt\").toPDFArray()\n    }\n\n    let result = this.parseFieldsArray(\n      this.pdfReader\n        .queryDictionaryObject(fieldDictionary, \"Kids\")\n        .toPDFArray(),\n      { ...inheritedProperties, ...localEnv },\n      baseFieldName\n    )\n\n    return result\n  }\n\n  parseOnOffValue(fieldDictionary) {\n    if (fieldDictionary.exists(\"V\")) {\n      let value = fieldDictionary.queryObject(\"V\").toString()\n      if (value === \"Off\" || value === \"\") {\n        return false\n      } else {\n        return true\n      }\n    } else {\n      return null\n    }\n  }\n\n  parseRadioButtonValue(fieldDictionary) {\n    if (fieldDictionary.exists(\"V\")) {\n      let value = fieldDictionary.queryObject(\"V\").toString()\n\n      if (value === \"Off\" || value === \"\") {\n        return null\n      } else {\n        // using true cause sometimes these are actually checkboxes, and there's no underlying kids\n        let result = true\n        // for radio button this would be an appearance name of a radio button that's turned on. we wanna look for it\n        if (fieldDictionary.exists(\"Kids\")) {\n          let kidsArray = this.pdfReader\n            .queryDictionaryObject(fieldDictionary, \"Kids\")\n            .toPDFArray()\n\n          for (let i = 0; i < kidsArray.getLength(); ++i) {\n            let widgetDictionary = this.pdfReader\n              .queryArrayObject(kidsArray, i)\n              .toPDFDictionary()\n            // use the dictionary Ap/N dictionary for looking up the appearance stream name\n            let apDictionary = this.pdfReader\n              .queryDictionaryObject(widgetDictionary, \"AP\")\n              .toPDFDictionary()\n            let nAppearances = this.pdfReader\n              .queryDictionaryObject(apDictionary, \"N\")\n              .toPDFDictionary()\n\n            if (nAppearances.exists(value)) {\n              // Found!\n              result = i // save the selected index as value\n              break\n            }\n          }\n        }\n\n        return result\n      }\n    } else {\n      return null\n    }\n  }\n\n  parseTextFieldValue(fieldDictionary, fieldName) {\n    // grab field value, may be either a text string or a text stream\n    if (!fieldDictionary.exists(fieldName)) {\n      return null\n    }\n\n    let valueField = this.pdfReader.queryDictionaryObject(\n      fieldDictionary,\n      fieldName\n    )\n\n    if (valueField.getType() == hummus.ePDFObjectLiteralString) {\n      return toText(valueField)\n    } else if (valueField.getType() == hummus.ePDFObjectStream) {\n      let bytes = []\n      let readStream = pdfReader.startReadingFromStream(\n        valueField.toPDFStream()\n      )\n\n      while (readStream.notEnded()) {\n        const readData = readStream.read(1)\n        // do something with the data\n        bytes.push(readData[0])\n      }\n      return new PDFTextString(bytes).toString()\n    } else {\n      return null\n    }\n  }\n\n  parseChoiceValue(fieldDictionary) {\n    if (fieldDictionary.exists(\"V\")) {\n      let valueField = this.pdfReader.queryDictionaryObject(\n        fieldDictionary,\n        \"V\"\n      )\n\n      if (\n        valueField.getType() == hummus.ePDFObjectLiteralString ||\n        valueField.getType() == hummus.ePDFObjectHexString\n      ) {\n        // text string. read into value\n        return toText(valueField)\n      } else if (valueField.getType == hummus.ePDFObjectArray) {\n        let arrayOfStrings = valueField.toPDFArray().toJSArray()\n        return arrayOfStrings.map(toText)\n      } else {\n        return undefined\n      }\n    } else {\n      return undefined\n    }\n  }\n\n  parseFieldsValueData(result, fieldDictionary, flags, inheritedProperties) {\n    const localFieldType = fieldDictionary.exists(\"FT\")\n      ? fieldDictionary.queryObject(\"FT\").toString()\n      : undefined\n    const fieldType = localFieldType || inheritedProperties[\"FT\"]\n\n    if (!fieldType) {\n      return null // k. must be a widget\n    }\n\n    switch (fieldType) {\n      case \"Btn\": {\n        if ((flags >> 16) & 1) {\n          // push button\n          result[\"type\"] = \"button\"\n          // no value\n        } else if ((flags >> 15) & 1) {\n          // radio button\n          result[\"type\"] = \"radio\"\n          result[\"value\"] = this.parseRadioButtonValue(fieldDictionary)\n        } else {\n          // checkbox\n          result[\"type\"] = \"checkbox\"\n          result[\"value\"] = this.parseOnOffValue(fieldDictionary)\n        }\n        break\n      }\n      case \"Tx\": {\n        // result['isFileSelect'] = !!(flags>>20 & 1)\n        if ((flags >> 25) & 1) {\n          result[\"type\"] = \"richtext\"\n          // rich text, value in 'RV'\n          result[\"value\"] = this.parseTextFieldValue(fieldDictionary, \"RV\")\n          result[\"plainValue\"] = this.parseTextFieldValue(fieldDictionary, \"V\")\n        } else {\n          result[\"type\"] = \"plaintext\"\n          result[\"value\"] = this.parseTextFieldValue(fieldDictionary, \"V\")\n        }\n\n        break\n      }\n      case \"Ch\": {\n        result[\"type\"] = \"choice\"\n        result[\"value\"] = this.parseChoiceValue(fieldDictionary)\n        break\n      }\n      case \"Sig\": {\n        result[\"type\"] = \"signature\"\n        break\n      }\n    }\n  }\n\n  parseField(fieldDictionary, inheritedProperties, baseFieldName) {\n    let fieldNameT = fieldDictionary.exists(\"T\")\n      ? toText(fieldDictionary.queryObject(\"T\"))\n      : undefined\n    let fieldNameTU = fieldDictionary.exists(\"TU\")\n      ? toText(fieldDictionary.queryObject(\"TU\"))\n      : undefined\n    let fieldNameTM = fieldDictionary.exists(\"TM\")\n      ? toText(fieldDictionary.queryObject(\"TM\"))\n      : undefined\n    let fieldFlags = fieldDictionary.exists(\"Ff\")\n      ? fieldDictionary.queryObject(\"Ff\").toNumber()\n      : undefined\n    let fieldRect = fieldDictionary.exists(\"Rect\")\n      ? fieldDictionary\n          .queryObject(\"Rect\")\n          .toPDFArray()\n          .toJSArray()\n      : undefined\n    let fieldP = fieldDictionary.exists(\"P\")\n      ? fieldDictionary\n          .queryObject(\"P\")\n          .toPDFIndirectObjectReference()\n          .getObjectID()\n      : undefined\n\n    fieldFlags =\n      fieldFlags === undefined ? inheritedProperties[\"Ff\"] : fieldFlags\n    fieldFlags = fieldFlags || 0\n\n    if (fieldRect) {\n      fieldRect = fieldRect.map((r) => r.value)\n    }\n\n    // Assume that if there's no T and no Kids, this is a widget annotation which is not a field\n    if (\n      fieldNameT === undefined &&\n      !fieldDictionary.exists(\"Kids\") &&\n      fieldDictionary.exists(\"Subtype\") &&\n      fieldDictionary.queryObject(\"Subtype\").toString() == \"Widget\"\n    ) {\n      return null\n    }\n\n    let result = {\n      name: fieldNameT,\n      fullName:\n        fieldNameT === undefined ? undefined : baseFieldName + fieldNameT,\n      //alternateName: fieldNameTU,\n      //mappingName: fieldNameTM,\n      //isNoExport: !!((fieldFlags>>2) & 1),\n      rect: fieldRect,\n      page: this.pageMap[fieldP],\n    }\n\n    if (fieldDictionary.exists(\"Kids\")) {\n      let kids = this.parseKids(\n        fieldDictionary,\n        inheritedProperties,\n        baseFieldName + fieldNameT + \".\"\n      )\n\n      if (kids) {\n        // that would be a non terminal node, otherwise all kids are annotations an null would be returned\n        result[\"kids\"] = kids\n      } else {\n        // a terminal node, so kids array returned empty\n        this.parseFieldsValueData(\n          result,\n          fieldDictionary,\n          fieldFlags,\n          inheritedProperties\n        )\n      }\n    } else {\n      // read fields value data\n      this.parseFieldsValueData(\n        result,\n        fieldDictionary,\n        fieldFlags,\n        inheritedProperties\n      )\n    }\n\n    return result\n  }\n\n  parseFieldsArray(fieldsArray, inheritedProperties, baseFieldName) {\n    let result = []\n\n    for (let i = 0; i < fieldsArray.getLength(); ++i) {\n      let fieldResult = this.parseField(\n        this.pdfReader.queryArrayObject(fieldsArray, i).toPDFDictionary(),\n        inheritedProperties,\n        baseFieldName\n      )\n\n      if (fieldResult) {\n        result.push(fieldResult)\n      }\n    }\n\n    return result\n  }\n}\n"],"file":"PDFTool.js"}