{"version":3,"sources":["../src/PDFTool.js"],"names":["PDFTool","autobind","constructor","toolName","log","container","hummus","fs","concat","options","pdfFiles","length","outputFile","pdfFile","existsSync","Error","pdfWriter","createWriter","appendPDFPagesFromPDF","end","copyFile","parsePageTree","context","dict","dictType","queryObject","value","kids","toJSArray","forEach","kid","pdfReader","parseNewObject","getObjectID","annots","exists","getType","ePDFObjectIndirectObjectReference","annot","annotDict","subType","hasName","hasKids","rect","map","n","fields","push","name","page","nextPageNum","dataFile","createReader","catalogDict","queryDictionaryObject","getTrailer","pagesDict","fieldData","numPages","stripAcroFormAndAnnotations","buf","readFile","md5","buffer","writeFile","JSON5","stringify","undefined","strip","copyingContext","createPDFCopyingContext","getPagesCount","i","parsePage","pageMediaBox","getMediaBox","newPage","createPage","mergePDFPageToPage","writePage","fill","data","fontSize","parse","encoding","e","message","createWriterToModify","modifiedFilePath","getModifiedFileParser","font","fontDims","fontFile","getFontForFile","calculateTextDimensions","toPDFDictionary","warning","pageModifier","PDFPageModifier","pageContext","startContext","getContext","filter","f","field","x","y","w","h","type","q","rg","re","Q","BT","g","Ts","Tm","Tf","Tj","toString","ET","pngFileName","tmp","tmpName","postfix","QRCode","toFile","endContext","imageXObject","createFormXObjectFromPNG","cm","doXObject","unlinkSync","G","checkboxBorders","J","S","dx","dy","m","l","halfH","gsID","createExtGState","formXObject","createFormXObject","gsName","getResourcesDictionary","addExtGStateMapping","getContentContext","gs","height","endFormXObject","Math","PI","cos","sin","opacity","getObjectsContext","id","startNewIndirectObject","startDictionary","writeKey","writeNameValue","writeNumber","endLine","writeBoolean","endDictionary","watermark","watermarkFile","getPDFPageInfo","pageNum","mediaBox","watermarkInfo","formIDs","createFormXObjectsFromPDF","ePDFPageBoxMediaBox","startPageContentContext","addFormXObjectMapping","run","argv","string","boolean","alias","o","d","s","c","args","debug","command","_","toLowerCase","shift","version","info","fullVersion","help","parseInt","error"],"mappings":"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","sourcesContent":["import parseArgs from \"minimist\"\nimport { fullVersion } from \"./version\"\nimport fs from \"fs-extra\"\nimport tmp from \"tmp-promise\"\nimport hummus from \"@kingstonsoftware/hummus\"\nimport JSON5 from \"json5\"\nimport QRCode from \"qrcode\"\nimport md5 from \"md5\"\nimport autobind from \"autobind-decorator\"\nimport assert from \"assert\"\n\n@autobind\nexport class PDFTool {\n  constructor(toolName, log, container) {\n    container = container || {}\n\n    this.toolName = toolName\n    this.log = log\n    this.hummus = container.hummus || hummus\n    this.fs = container.fs || fs\n  }\n\n  async concat(options) {\n    assert(options.pdfFiles.length !== 0, \"Must specify at least one PDF file\")\n    assert(options.outputFile, \"No output file specified\")\n\n    if (options.pdfFiles.length >= 2) {\n      for (let pdfFile of options.pdfFiles) {\n        if (!this.fs.existsSync(pdfFile)) {\n          throw new Error(`File '${pdfFile}' does not exist`)\n        }\n      }\n\n      const pdfWriter = this.hummus.createWriter(options.outputFile)\n\n      for (let pdfFile of options.pdfFiles) {\n        pdfWriter.appendPDFPagesFromPDF(pdfFile)\n      }\n\n      pdfWriter.end()\n    } else {\n      await this.fs.copyFile(options.pdfFiles[0], options.outputFile)\n    }\n  }\n\n  parsePageTree(context, dict) {\n    const dictType = dict.queryObject(\"Type\").value\n\n    if (dictType === \"Pages\") {\n      // Parse the kids of this tree\n      const kids = dict.queryObject(\"Kids\").toJSArray()\n\n      kids.forEach((kid) => {\n        this.parsePageTree(\n          context,\n          this.pdfReader.parseNewObject(kid.getObjectID())\n        )\n      })\n    } else if (dictType === \"Page\") {\n      // Parse any field annotations on the page\n      let annots = dict.exists(\"Annots\") ? dict.queryObject(\"Annots\") : null\n\n      if (annots) {\n        if (\n          annots.getType() === this.hummus.ePDFObjectIndirectObjectReference\n        ) {\n          annots = this.pdfReader.parseNewObject(annots.getObjectID())\n        }\n\n        annots = annots.toJSArray()\n\n        annots.forEach((annot) => {\n          let annotDict = null\n\n          if (\n            annot.getType() === this.hummus.ePDFObjectIndirectObjectReference\n          ) {\n            annotDict = this.pdfReader.parseNewObject(annot.getObjectID())\n          } else {\n            annotDict = annot\n          }\n\n          const subType = annotDict.queryObject(\"Subtype\").value\n          const hasName = annotDict.exists(\"T\")\n          const hasKids = annotDict.exists(\"Kids\")\n\n          if (subType === \"Widget\" && !hasKids && hasName) {\n            let rect = annotDict\n              .queryObject(\"Rect\")\n              .toJSArray()\n              .map((n) => n.value)\n\n            // We want the rect in lower left, top right order\n            if (rect[1] > rect[3]) {\n              rect = [rect[2], rect[3], rect[0], rect[1]]\n\n              if (rect[0] > rect[2]) {\n                rect = [rect[2], rect[1], rect[0], rect[3]]\n              }\n            }\n\n            context.fields.push({\n              name: annotDict.queryObject(\"T\").value,\n              page: context.nextPageNum,\n              rect,\n            })\n          }\n        })\n\n        context.nextPageNum += 1\n      }\n    }\n  }\n\n  async fields(options) {\n    assert(\n      options.pdfFile,\n      \"Must specify a PDF from which to extract information\"\n    )\n    assert(\n      this.fs.existsSync(options.pdfFile),\n      `File '${options.pdfFile}' does not exist`\n    )\n    assert(options.dataFile, `No output data file specified`)\n\n    this.pdfReader = this.hummus.createReader(options.pdfFile)\n\n    const catalogDict = this.pdfReader.queryDictionaryObject(\n      this.pdfReader.getTrailer(),\n      \"Root\"\n    )\n    const pagesDict = this.pdfReader.parseNewObject(\n      catalogDict.queryObject(\"Pages\").getObjectID()\n    )\n    let fieldData = {\n      numPages: pagesDict.queryObject(\"Count\").value,\n    }\n\n    if (catalogDict.exists(\"AcroForm\")) {\n      const context = { nextPageNum: 0, fields: [] }\n\n      this.parsePageTree(context, pagesDict)\n      fieldData.fields = context.fields\n\n      if (options.outputFile) {\n        await this.stripAcroFormAndAnnotations(\n          options.pdfFile,\n          options.outputFile\n        )\n      }\n    } else {\n      fieldData.fields = []\n\n      if (options.outputFile) {\n        await this.fs.copyFile(options.pdfFile, options.outputFile)\n      }\n    }\n\n    if (options.outputFile) {\n      const buf = await this.fs.readFile(options.outputFile)\n\n      fieldData.md5 = md5(buf.buffer)\n    }\n\n    await this.fs.writeFile(\n      options.dataFile,\n      JSON5.stringify(fieldData, undefined, \"  \")\n    )\n  }\n\n  async strip(options) {\n    assert(\n      options.pdfFile,\n      \"Must specify a PDF from which to remove the AcroForm\"\n    )\n    assert(\n      this.fs.existsSync(options.pdfFile),\n      `File '${options.pdfFile}' does not exist`\n    )\n    assert(options.outputFile, `No output file specified`)\n\n    await this.stripAcroFormAndAnnotations(options.pdfFile, options.outputFile)\n  }\n\n  async stripAcroFormAndAnnotations(pdfFile, outputFile) {\n    // This strips the AcroForm and page annotations as a side-effect\n    // merging them into a new page.\n    const pdfWriter = hummus.createWriter(outputFile)\n    const pdfReader = hummus.createReader(pdfFile)\n    const copyingContext = pdfWriter.createPDFCopyingContext(pdfReader)\n\n    // Next, iterate through the pages from the source document\n    const numPages = pdfReader.getPagesCount()\n\n    for (let i = 0; i < numPages; i++) {\n      const page = pdfReader.parsePage(i)\n      const pageMediaBox = page.getMediaBox()\n      const newPage = pdfWriter.createPage(...pageMediaBox)\n\n      // Merge the page; this will also remove annotations.\n      copyingContext.mergePDFPageToPage(newPage, i)\n      pdfWriter.writePage(newPage)\n    }\n\n    pdfWriter.end()\n  }\n\n  async fill(options) {\n    assert(options.pdfFile, \"Must specify an input PDF file\")\n    assert(\n      this.fs.existsSync(options.pdfFile),\n      `File '${options.pdfFile}' does not exist`\n    )\n    assert(options.outputFile, \"No output file specified\")\n    assert(\n      (options.dataFile && !options.data) ||\n        (!options.dataFile && options.data),\n      \"Must specify a data file or data\"\n    )\n\n    if (!options.fontSize) {\n      options.fontSize = 12\n    }\n\n    let data = options.data\n\n    if (!data) {\n      try {\n        data = await JSON5.parse(\n          await this.fs.readFile(options.dataFile, { encoding: \"utf8\" })\n        )\n      } catch (e) {\n        throw new Error(\n          `Unable to read data file '${options.dataFile}'. ${e.message}`\n        )\n      }\n    }\n\n    if (data.md5) {\n      const buf = await this.fs.readFile(options.pdfFile)\n\n      if (md5(buf.buffer) !== data.md5) {\n        throw new Error(\n          `MD5 for ${options.pdfFile} does not match the one in the data`\n        )\n      }\n    }\n\n    this.pdfWriter = hummus.createWriterToModify(options.pdfFile, {\n      modifiedFilePath: options.outputFile,\n    })\n    this.pdfReader = this.pdfWriter.getModifiedFileParser()\n\n    let font = null\n    let fontDims = null\n\n    if (options.fontFile) {\n      font = this.pdfWriter.getFontForFile(options.fontFile)\n      fontDims = font.calculateTextDimensions(\"X\", options.fontSize)\n    }\n\n    const catalogDict = this.pdfReader\n      .queryDictionaryObject(this.pdfReader.getTrailer(), \"Root\")\n      .toPDFDictionary()\n\n    if (catalogDict.exists(\"AcroForm\")) {\n      this.log.warning(\"PDF still has an AcroForm\")\n    }\n\n    const numPages = this.pdfReader.getPagesCount()\n\n    for (let i = 0; i < numPages; i++) {\n      const pageModifier = new hummus.PDFPageModifier(this.pdfWriter, i, true)\n      let pageContext = pageModifier.startContext().getContext()\n      const fields = data.fields.filter((f) => f.page === i)\n\n      for (let field of fields) {\n        const name = field.name\n        const value = field.value\n        const x = field.rect[0]\n        const y = field.rect[1]\n        const w = field.rect[2] - x\n        const h = field.rect[3] - y\n\n        if (!name) {\n          throw new Error(`Field at index ${i} does not have a 'name' property`)\n        }\n\n        switch (field.type) {\n          case \"highlight\":\n            pageContext.q().rg(1, 1, 0.6).re(x, y, w, h).f().Q()\n            break\n          case \"plaintext\":\n            if (!font) {\n              throw new Error(\n                `Field '${name}'; a font file must be specified for 'plaintext' fields`\n              )\n            }\n            if (value === undefined || value === null) {\n              throw new Error(`Field '${name}' must not be null or undefined`)\n            }\n\n            pageContext\n              .q()\n              .BT()\n              .g(0)\n              .Ts(h / 6.0) // Text rise Table 5.2\n              .Tm(1, 0, 0, 1, x, y)\n              .Tf(font, options.fontSize)\n              .Tj(value.toString())\n              .ET()\n              .Q()\n            break\n          case \"qrcode\":\n            if (value === undefined || value === null) {\n              throw new Error(`Field '${name}' must not be null or undefined`)\n            }\n\n            if (typeof value === \"string\" && value.length === 0) {\n              throw new Error(\n                `QR code field '${name}' value must be a non-empty string`\n              )\n            }\n\n            const pngFileName = await tmp.tmpName({ postfix: \".png\" })\n\n            await QRCode.toFile(pngFileName, value)\n\n            pageModifier.endContext()\n            let imageXObject = this.pdfWriter.createFormXObjectFromPNG(\n              pngFileName\n            )\n            pageContext = pageModifier.startContext().getContext()\n\n            pageContext.q().cm(1, 0, 0, 1, x, y).doXObject(imageXObject).Q()\n\n            fs.unlinkSync(pngFileName)\n            break\n          case \"checkbox\":\n            pageContext.q().G(0).w(2.5)\n\n            if (options.checkboxBorders) {\n              pageContext.J(2).re(x, y, w, h).S()\n            }\n\n            if (!!value) {\n              const dx = w / 5.0\n              const dy = h / 5.0\n\n              pageContext\n                .J(1)\n                .m(x + dx, y + dy)\n                .l(x + w - dx, y + h - dy)\n                .S()\n                .m(x + dx, y + h - dy)\n                .l(x + w - dy, y + dy)\n                .S()\n            }\n\n            pageContext.Q()\n            break\n          case \"signhere\":\n            const halfH = h / 2\n\n            if (!font) {\n              throw new Error(\"Font file must be specified for signhere fields\")\n            }\n\n            if (value === undefined || value === null) {\n              throw new Error(`Field '${name}' must not be null or undefined`)\n            }\n\n            pageModifier.endContext()\n\n            const gsID = this.createExtGState(0.5)\n            const formXObject = this.pdfWriter.createFormXObject(0, 0, w, h)\n            const gsName = formXObject\n              .getResourcesDictionary()\n              .addExtGStateMapping(gsID)\n\n            formXObject\n              .getContentContext()\n              .q()\n              .gs(gsName)\n              .rg(1, 0.6, 1)\n              .m(0, halfH)\n              .l(halfH, 0)\n              .l(w, 0)\n              .l(w, h)\n              .l(halfH, h)\n              .f()\n              .G(0)\n              .J(0)\n              .w(1)\n              .m(halfH, h)\n              .l(0, halfH)\n              .l(halfH, 0)\n              .S()\n              .w(2)\n              .m(halfH, 0)\n              .l(w, 0)\n              .l(w, h)\n              .l(halfH, h)\n              .S()\n              .BT()\n              .g(0)\n              .Tm(1, 0, 0, 1, halfH, halfH - fontDims.height / 2.0)\n              .Tf(font, 12)\n              .Tj(`Sign Here ${value.toString()}`)\n              .ET()\n              .Q()\n            this.pdfWriter.endFormXObject(formXObject)\n\n            pageContext = pageModifier.startContext().getContext()\n\n            const q = Math.PI / 4.0 // 45 degrees\n\n            // The sign-here arrow is the same height as the field box,\n            // points to the bottom left corner of the box and is at 45 degrees\n            pageContext\n              .q()\n              .cm(1, 0, 0, 1, x, y) // Translate\n              .cm(Math.cos(q), Math.sin(q), -Math.sin(q), Math.cos(q), 0, 0) // Rotate\n              .cm(1, 0, 0, 1, 0, -halfH) // Translate\n              // NOTE: The coordinate space of the XObjects is the same as the page!\n              .doXObject(formXObject)\n              .Q()\n            break\n          default:\n            if (field.type === undefined) {\n              this.log.warning(`Field '${field.name}' hos no 'type' defined`)\n            } else {\n              this.log.warning(\n                `Field '${field.name}' is of unknown type '${field.type}'`\n              )\n            }\n            break\n        }\n      }\n\n      pageModifier.endContext().writePage()\n    }\n\n    this.pdfWriter.end()\n  }\n\n  createExtGState(opacity) {\n    const context = this.pdfWriter.getObjectsContext()\n    const id = context.startNewIndirectObject()\n    const dict = context.startDictionary()\n\n    // See Section 4.3.4\n    dict.writeKey(\"type\").writeNameValue(\"ExtGState\").writeKey(\"ca\") // Non-stroking opacity\n    context.writeNumber(opacity).endLine()\n    dict.writeKey(\"CA\") // Stroking opacity\n    context.writeNumber(opacity).endLine()\n    dict.writeKey(\"SA\") // Turn on stroke adjustment\n    context.writeBoolean(true).endLine().endDictionary(dict)\n\n    return id\n  }\n\n  async watermark(options) {\n    assert(\n      options.pdfFile,\n      \"Must specify a PDF from which to remove the AcroForm\"\n    )\n    assert(\n      this.fs.existsSync(options.pdfFile),\n      `File '${options.pdfFile}' does not exist`\n    )\n    assert(options.watermarkFile, \"No watermark file specified\")\n    assert(\n      this.fs.existsSync(options.watermarkFile),\n      `File '${options.watermarkFile}' does not exist`\n    )\n    assert(options.outputFile, \"No output file specified\")\n\n    this.pdfWriter = hummus.createWriter(options.outputFile)\n    this.pdfReader = hummus.createReader(options.pdfFile)\n    const copyingContext = this.pdfWriter.createPDFCopyingContext(\n      this.pdfReader\n    )\n\n    const getPDFPageInfo = (pdfFile, pageNum) => {\n      const pdfReader = this.hummus.createReader(pdfFile)\n      const page = pdfReader.parsePage(pageNum)\n\n      return {\n        mediaBox: page.getMediaBox(),\n      }\n    }\n\n    // First, read in the watermark PDF and create a\n    const watermarkInfo = getPDFPageInfo(options.watermarkFile, 0)\n\n    const formIDs = this.pdfWriter.createFormXObjectsFromPDF(\n      options.watermarkFile,\n      hummus.ePDFPageBoxMediaBox\n    )\n\n    // Next, iterate through the pages from the source document\n    const numPages = this.pdfReader.getPagesCount()\n\n    for (let i = 0; i < numPages; i++) {\n      const page = this.pdfReader.parsePage(i)\n      const pageMediaBox = page.getMediaBox()\n      const newPage = this.pdfWriter.createPage(...pageMediaBox)\n\n      // Merge the page; this will also remove annotations.\n      copyingContext.mergePDFPageToPage(newPage, i)\n\n      const pageContext = this.pdfWriter.startPageContentContext(newPage)\n\n      pageContext\n        .q()\n        .cm(\n          1,\n          0,\n          0,\n          1,\n          (pageMediaBox[2] - watermarkInfo.mediaBox[2]) / 2,\n          (pageMediaBox[3] - watermarkInfo.mediaBox[3]) / 2\n        )\n        .doXObject(\n          newPage.getResourcesDictionary().addFormXObjectMapping(formIDs[0])\n        )\n        .Q()\n\n      this.pdfWriter.writePage(newPage)\n    }\n\n    this.pdfWriter.end()\n  }\n\n  async run(argv) {\n    const options = {\n      string: [\n        \"output-file\",\n        \"watermark-file\",\n        \"data-file\",\n        \"font-file\",\n        \"font-size\",\n      ],\n      boolean: [\"help\", \"version\", \"checkbox-borders\", \"debug\"],\n      alias: {\n        o: \"output-file\",\n        w: \"watermark-file\",\n        d: \"data-file\",\n        f: \"font-file\",\n        s: \"font-size\",\n        c: \"checkbox-borders\",\n      },\n    }\n\n    const args = parseArgs(argv, options)\n\n    this.debug = args.debug\n\n    let command = \"help\"\n\n    if (args._.length > 0) {\n      command = args._[0].toLowerCase()\n      args._.shift()\n    }\n\n    if (args.version) {\n      this.log.info(`${fullVersion}`)\n      return 0\n    }\n\n    switch (command) {\n      case \"concat\":\n        if (args.help) {\n          this.log.info(`\nUsage: ${this.toolName} concat <pdf1> <pdf2> [<pdf3> ...] [options]\n\nOptions:\n  --output-file, -o  Output PDF file\n\nNotes:\n  File will be concatenated in the order in which they are given.\n`)\n          return 0\n        }\n        return await this.concat({\n          pdfFiles: args._,\n          outputFile: args[\"output-file\"],\n        })\n      case \"fields\":\n        if (args.help) {\n          this.log.info(`\nUsage: ${this.toolName} fields <pdf>\n\nOptions:\n--data-file, -d         Output JSON5 file\n--output-file, -o       Optional output PDF stripped of AcroForm and annotations.\n                        Adds 'md5' field to the output JSON5.\n\nNotes:\nOutputs a JSON5 file containing information for all the AcroForm fields in the document.\nIf an output file is specified a stripped PDF will be generated (see 'strip' command)\nand an MD5 hash for the file will be included in the data file.\n`)\n          return 0\n        }\n        return await this.fields({\n          pdfFile: args._[0],\n          dataFile: args[\"data-file\"],\n          outputFile: args[\"output-file\"],\n        })\n      case \"strip\":\n        if (args.help) {\n          this.log.info(`\nUsage: ${this.toolName} strip <pdf> [options]\n\nOptions:\n  --output-file, -o    Output PDF file\n\nNotes:\nStrips any AcroForm and page annotations from the document.\n`)\n          return 0\n        }\n        return await this.strip({\n          pdfFile: args._[0],\n          outputFile: args[\"output-file\"],\n        })\n      case \"watermark\":\n        if (args.help) {\n          this.log.info(`\nUsage: ${this.toolName} watermark <pdf> [options]\n\nOptions:\n  --watermark-file , -w   Watermarked PDF document\n  --output-file, -o       Output PDF file\n\nNotes:\nAdds a watermark images to the existing content of each page of the given PDF.\n`)\n          return 0\n        }\n        return await this.watermark({\n          pdfFile: args._[0],\n          watermarkFile: args[\"watermark-file\"],\n          outputFile: args[\"output-file\"],\n        })\n      case \"fill\":\n        if (args.help) {\n          this.log.info(`\nUsage: ${this.toolName} fill <pdf> [options]\n\nOptions:\n--output-file, -o       Output PDF file\n--data-file, -d         Input JSON5 data file\n--font-file, -f         Input font file name to use for text fields\n--font-size, -s         Input font size in points\n--checkbox-borders, -c  Put borders around checkboxes\n\nNotes:\nInserts 'form' data into the pages of the PDF.\n`)\n          return 0\n        }\n        return await this.fill({\n          pdfFile: args._[0],\n          outputFile: args[\"output-file\"],\n          dataFile: args[\"data-file\"],\n          fontFile: args[\"font-file\"],\n          fontSize: parseInt(args[\"font-size\"]),\n          checkboxBorders: !!args[\"checkbox-borders\"],\n        })\n      case \"help\":\n        this.log.info(`\nUsage: ${this.toolName} <cmd> [options]\n\nCommands:\nhelp              Shows this help\nconcat            Concatenate two or more PDFs\nfields            Extract the field data from a PDF and optionally\n                  create a PDF stripped of its AcroForm and annotations.\n                  Generates an MD5 hash for the stripped PDF.\nstrip             Strip an AcroForm from a PDF\nwatermark         Add a watermark to every page of a PDF. Strips\n                  AcroForms and annotations in the resulting file.\nfill              Fill-in \"fields\" defined in a JSON5 file with data,\n                  checking against existing MD5 has for changes.\n\nGlobal Options:\n  --help          Shows this help.\n  --version       Shows the tool version.\n`)\n        return 0\n      default:\n        this.log.error(\n          `Unknown command ${command}.  Use --help to see available commands`\n        )\n        return -1\n    }\n\n    return 0\n  }\n}\n"],"file":"PDFTool.js"}