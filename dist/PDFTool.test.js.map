{"version":3,"sources":["../src/PDFTool.test.js"],"names":["tmpDirObj","toolName","beforeAll","tmp","dirSync","afterAll","removeCallback","getMockLog","info","jest","fn","warning","error","getMockHummus","createWriter","appendPDFPagesFromPDF","end","getMockFS","existsSync","getOutput","calls","mock","length","test","done","mockLog","tool","PDFTool","exitCode","run","expect","toBe","toEqual","stringContaining","stringMatching","mockHummus","mockFS","hummus","fs","concat","pdfFiles","outputFile"],"mappings":"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","sourcesContent":["import { PDFTool } from \"./PDFTool\"\nimport tmp from \"tmp\"\n\nlet tmpDirObj = null\nconst toolName = \"pdf-o-rama\"\n\nbeforeAll(() => {\n  tmpDirObj = tmp.dirSync()\n})\n\nafterAll(() => {\n  if (tmpDirObj) {\n    tmpDirObj.removeCallback()\n  }\n})\n\nfunction getMockLog() {\n  return {\n    info: jest.fn(),\n    warning: jest.fn(),\n    error: jest.fn(),\n  }\n}\n\nfunction getMockHummus() {\n  return {\n    createWriter: jest.fn(() => ({\n      appendPDFPagesFromPDF: jest.fn(),\n      end: jest.fn(),\n    })),\n  }\n}\n\nfunction getMockFS() {\n  return {\n    existsSync: jest.fn(() => true),\n  }\n}\n\nfunction getOutput(fn) {\n  const calls = fn.mock.calls\n\n  if (calls.length > 0 && calls[0].length > 0) {\n    return calls[0][0]\n  } else {\n    return \"\"\n  }\n}\n\ntest(\"--help\", async (done) => {\n  const mockLog = getMockLog()\n  const tool = new PDFTool(toolName, mockLog)\n  const exitCode = await tool.run([\"--help\"])\n\n  expect(exitCode).toBe(0)\n  expect(getOutput(mockLog.info)).toEqual(expect.stringContaining(\"--help\"))\n  done()\n})\n\ntest(\"--version\", async (done) => {\n  const mockLog = getMockLog()\n  const tool = new PDFTool(toolName, mockLog)\n  const exitCode = await tool.run([\"--version\"])\n\n  expect(exitCode).toBe(0)\n  expect(getOutput(mockLog.info)).toEqual(expect.stringMatching(/\\d\\.\\d\\.\\d/))\n  done()\n})\n\ntest(\"concat\", async (done) => {\n  const mockLog = getMockLog()\n  const mockHummus = getMockHummus()\n  const mockFS = getMockFS()\n  const tool = new PDFTool(toolName, mockLog, {\n    hummus: mockHummus,\n    fs: mockFS,\n  })\n\n  await tool.concat({ pdfFiles: [\"a.pdf\", \"b.pdf\"], outputFile: \"x.pdf\" })\n  done()\n})\n"],"file":"PDFTool.test.js"}